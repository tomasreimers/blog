# Chapter 9: State management

## Thick vs Thin clients

## Threads 

## Arraybuffers

https://whatpwacando.today/

## WASM 

## WebGL

## The universal virtual machine

Speaking of evolution, people who really believe in the web platform will tell you it’s a full fledged virtual machine: a sandboxed render engine and scripting environment that runs on virtually every device. 

One technological arc to highlight is the compilation of traditionally native languages into JavaScript. 

It started with ASM.js and Emscripten: ASM.js was a subset of JavaScript intended as a compile target, and Emscripten was a backend for LLVM (a very common compiler with support for C, C++, ObjC, etc.). Emscripten could compile native code into ASM.js and even render graphics APIs directly to the screen via Canvas (JavaScript’s realtime drawing APIs). 

This made for interesting technical demos, but became very real with WASM (or WebAssembly), a browser-supported compile target for the web that was (1) safe, and (2) directly transformable into native bytecode. This made it much faster than anything interpretted; some of the early benchmarks of WASM showed that it was only 2x slower than native! While the might seem like a high number, imagine being able to run PhotoShop in your browser with only 2x overhead compared running native... that’s really fast.

While WASM is not yet widely used in production (a notable exception being Figma, which uses it to power their editor), there are very cool demos:

 - [DOOM 3](https://wasm.continuation-labs.com/d3demo/)
 - [Google Earth](https://blog.chromium.org/2019/06/webassembly-brings-google-earth-to-more.html?m=1)
 - [Windows 95](https://copy.sh/v86/?profile=windows95)

For something between satire and reality, [The Birth and Death of JavaScript](https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript) is a funny talk that becomes more real every day.