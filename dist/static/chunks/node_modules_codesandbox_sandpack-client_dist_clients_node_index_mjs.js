"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_codesandbox_sandpack-client_dist_clients_node_index_mjs"],{

/***/ "./node_modules/@codesandbox/nodebox/build/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@codesandbox/nodebox/build/index.mjs ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INJECT_MESSAGE_TYPE: function() { return /* binding */ INJECT_MESSAGE_TYPE; },\n/* harmony export */   MessageReceiver: function() { return /* binding */ MessageReceiver; },\n/* harmony export */   MessageSender: function() { return /* binding */ MessageSender; },\n/* harmony export */   Nodebox: function() { return /* binding */ Nodebox; },\n/* harmony export */   PREVIEW_LOADED_MESSAGE_TYPE: function() { return /* binding */ PREVIEW_LOADED_MESSAGE_TYPE; }\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/pad.js\nvar require_pad = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/pad.js\"(exports, module) {\n    module.exports = function pad(num, size) {\n      var s = \"000000000\" + num;\n      return s.substr(s.length - size);\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/fingerprint.browser.js\nvar require_fingerprint_browser = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/fingerprint.browser.js\"(exports, module) {\n    var pad = require_pad();\n    var env = typeof window === \"object\" ? window : self;\n    var globalCount = Object.keys(env).length;\n    var mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;\n    var clientId = pad((mimeTypesLength + navigator.userAgent.length).toString(36) + globalCount.toString(36), 4);\n    module.exports = function fingerprint() {\n      return clientId;\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/getRandomValue.browser.js\nvar require_getRandomValue_browser = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/getRandomValue.browser.js\"(exports, module) {\n    var getRandomValue;\n    var crypto = typeof window !== \"undefined\" && (window.crypto || window.msCrypto) || typeof self !== \"undefined\" && self.crypto;\n    if (crypto) {\n      lim = Math.pow(2, 32) - 1;\n      getRandomValue = function() {\n        return Math.abs(crypto.getRandomValues(new Uint32Array(1))[0] / lim);\n      };\n    } else {\n      getRandomValue = Math.random;\n    }\n    var lim;\n    module.exports = getRandomValue;\n  }\n});\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/index.js\nvar require_cuid = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/index.js\"(exports, module) {\n    var fingerprint = require_fingerprint_browser();\n    var pad = require_pad();\n    var getRandomValue = require_getRandomValue_browser();\n    var c = 0;\n    var blockSize = 4;\n    var base = 36;\n    var discreteValues = Math.pow(base, blockSize);\n    function randomBlock() {\n      return pad((getRandomValue() * discreteValues << 0).toString(base), blockSize);\n    }\n    function safeCounter() {\n      c = c < discreteValues ? c : 0;\n      c++;\n      return c - 1;\n    }\n    function cuid3() {\n      var letter = \"c\", timestamp = new Date().getTime().toString(base), counter = pad(safeCounter().toString(base), blockSize), print = fingerprint(), random = randomBlock() + randomBlock();\n      return letter + timestamp + counter + print + random;\n    }\n    cuid3.slug = function slug() {\n      var date = new Date().getTime().toString(36), counter = safeCounter().toString(36).slice(-4), print = fingerprint().slice(0, 1) + fingerprint().slice(-1), random = randomBlock().slice(-2);\n      return date.slice(-2) + counter + print + random;\n    };\n    cuid3.isCuid = function isCuid(stringToCheck) {\n      if (typeof stringToCheck !== \"string\")\n        return false;\n      if (stringToCheck.startsWith(\"c\"))\n        return true;\n      return false;\n    };\n    cuid3.isSlug = function isSlug(stringToCheck) {\n      if (typeof stringToCheck !== \"string\")\n        return false;\n      var stringLength = stringToCheck.length;\n      if (stringLength >= 7 && stringLength <= 10)\n        return true;\n      return false;\n    };\n    cuid3.fingerprint = fingerprint;\n    module.exports = cuid3;\n  }\n});\n\n// ../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/createDeferredExecutor.js\nvar require_createDeferredExecutor = __commonJS({\n  \"../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/createDeferredExecutor.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.createDeferredExecutor = void 0;\n    function createDeferredExecutor() {\n      const executor = (resolve, reject) => {\n        executor.state = \"pending\";\n        executor.resolve = (data) => {\n          if (executor.state !== \"pending\") {\n            return;\n          }\n          executor.result = data;\n          const onFulfilled = (value) => {\n            executor.state = \"fulfilled\";\n            return value;\n          };\n          return resolve(data instanceof Promise ? data : Promise.resolve(data).then(onFulfilled));\n        };\n        executor.reject = (reason) => {\n          if (executor.state !== \"pending\") {\n            return;\n          }\n          queueMicrotask(() => {\n            executor.state = \"rejected\";\n          });\n          return reject(executor.rejectionReason = reason);\n        };\n      };\n      return executor;\n    }\n    exports.createDeferredExecutor = createDeferredExecutor;\n  }\n});\n\n// ../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/DeferredPromise.js\nvar require_DeferredPromise = __commonJS({\n  \"../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/DeferredPromise.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.DeferredPromise = void 0;\n    var createDeferredExecutor_1 = require_createDeferredExecutor();\n    var DeferredPromise4 = class extends Promise {\n      #executor;\n      resolve;\n      reject;\n      constructor(executor = null) {\n        const deferredExecutor = (0, createDeferredExecutor_1.createDeferredExecutor)();\n        super((originalResolve, originalReject) => {\n          deferredExecutor(originalResolve, originalReject);\n          executor?.(deferredExecutor.resolve, deferredExecutor.reject);\n        });\n        this.#executor = deferredExecutor;\n        this.resolve = this.#executor.resolve;\n        this.reject = this.#executor.reject;\n      }\n      get state() {\n        return this.#executor.state;\n      }\n      get rejectionReason() {\n        return this.#executor.rejectionReason;\n      }\n      then(onFulfilled, onRejected) {\n        return this.#decorate(super.then(onFulfilled, onRejected));\n      }\n      catch(onRejected) {\n        return this.#decorate(super.catch(onRejected));\n      }\n      finally(onfinally) {\n        return this.#decorate(super.finally(onfinally));\n      }\n      #decorate(promise) {\n        return Object.defineProperties(promise, {\n          resolve: { configurable: true, value: this.resolve },\n          reject: { configurable: true, value: this.reject }\n        });\n      }\n    };\n    exports.DeferredPromise = DeferredPromise4;\n  }\n});\n\n// ../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/index.js\nvar require_build = __commonJS({\n  \"../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/index.js\"(exports) {\n    \"use strict\";\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o, k2, desc);\n    } : function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_createDeferredExecutor(), exports);\n    __exportStar(require_DeferredPromise(), exports);\n  }\n});\n\n// ../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/MemoryLeakError.js\nvar require_MemoryLeakError = __commonJS({\n  \"../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/MemoryLeakError.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.MemoryLeakError = void 0;\n    var MemoryLeakError = class extends Error {\n      emitter;\n      type;\n      count;\n      constructor(emitter, type, count) {\n        super(`Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`);\n        this.emitter = emitter;\n        this.type = type;\n        this.count = count;\n        this.name = \"MaxListenersExceededWarning\";\n      }\n    };\n    exports.MemoryLeakError = MemoryLeakError;\n  }\n});\n\n// ../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/Emitter.js\nvar require_Emitter = __commonJS({\n  \"../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/Emitter.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Emitter = void 0;\n    var MemoryLeakError_1 = require_MemoryLeakError();\n    var _events, _maxListeners, _hasWarnedAboutPotentialMemortyLeak, _getListeners, getListeners_fn, _removeListener, removeListener_fn, _wrapOnceListener, wrapOnceListener_fn, _internalEmit, internalEmit_fn;\n    var _Emitter = class {\n      constructor() {\n        __privateAdd(this, _getListeners);\n        __privateAdd(this, _removeListener);\n        __privateAdd(this, _wrapOnceListener);\n        __privateAdd(this, _internalEmit);\n        __privateAdd(this, _events, void 0);\n        __privateAdd(this, _maxListeners, void 0);\n        __privateAdd(this, _hasWarnedAboutPotentialMemortyLeak, void 0);\n        __privateSet(this, _events, /* @__PURE__ */ new Map());\n        __privateSet(this, _maxListeners, _Emitter.defaultMaxListeners);\n        __privateSet(this, _hasWarnedAboutPotentialMemortyLeak, false);\n      }\n      static listenerCount(emitter, eventName) {\n        return emitter.listenerCount(eventName);\n      }\n      setMaxListeners(maxListeners) {\n        __privateSet(this, _maxListeners, maxListeners);\n        return this;\n      }\n      getMaxListeners() {\n        return __privateGet(this, _maxListeners);\n      }\n      eventNames() {\n        return Array.from(__privateGet(this, _events).keys());\n      }\n      emit(eventName, ...data) {\n        const listeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName);\n        listeners.forEach((listener) => {\n          listener.apply(this, data);\n        });\n        return listeners.length > 0;\n      }\n      addListener(eventName, listener) {\n        __privateMethod(this, _internalEmit, internalEmit_fn).call(this, \"newListener\", eventName, listener);\n        const nextListeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName).concat(listener);\n        __privateGet(this, _events).set(eventName, nextListeners);\n        if (__privateGet(this, _maxListeners) > 0 && this.listenerCount(eventName) > __privateGet(this, _maxListeners) && !__privateGet(this, _hasWarnedAboutPotentialMemortyLeak)) {\n          __privateSet(this, _hasWarnedAboutPotentialMemortyLeak, true);\n          const memoryLeakWarning = new MemoryLeakError_1.MemoryLeakError(this, eventName, this.listenerCount(eventName));\n          console.warn(memoryLeakWarning);\n        }\n        return this;\n      }\n      on(eventName, listener) {\n        return this.addListener(eventName, listener);\n      }\n      once(eventName, listener) {\n        return this.addListener(eventName, __privateMethod(this, _wrapOnceListener, wrapOnceListener_fn).call(this, eventName, listener));\n      }\n      prependListener(eventName, listener) {\n        const listeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName);\n        if (listeners.length > 0) {\n          const nextListeners = [listener].concat(listeners);\n          __privateGet(this, _events).set(eventName, nextListeners);\n        } else {\n          __privateGet(this, _events).set(eventName, listeners.concat(listener));\n        }\n        return this;\n      }\n      prependOnceListener(eventName, listener) {\n        return this.prependListener(eventName, __privateMethod(this, _wrapOnceListener, wrapOnceListener_fn).call(this, eventName, listener));\n      }\n      removeListener(eventName, listener) {\n        const listeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName);\n        if (listeners.length > 0) {\n          __privateMethod(this, _removeListener, removeListener_fn).call(this, listeners, listener);\n          __privateGet(this, _events).set(eventName, listeners);\n          __privateMethod(this, _internalEmit, internalEmit_fn).call(this, \"removeListener\", eventName, listener);\n        }\n        return this;\n      }\n      off(eventName, listener) {\n        return this.removeListener(eventName, listener);\n      }\n      removeAllListeners(eventName) {\n        if (eventName) {\n          __privateGet(this, _events).delete(eventName);\n        } else {\n          __privateGet(this, _events).clear();\n        }\n        return this;\n      }\n      listeners(eventName) {\n        return Array.from(__privateMethod(this, _getListeners, getListeners_fn).call(this, eventName));\n      }\n      listenerCount(eventName) {\n        return __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName).length;\n      }\n      rawListeners(eventName) {\n        return this.listeners(eventName);\n      }\n    };\n    var Emitter2 = _Emitter;\n    _events = new WeakMap();\n    _maxListeners = new WeakMap();\n    _hasWarnedAboutPotentialMemortyLeak = new WeakMap();\n    _getListeners = new WeakSet();\n    getListeners_fn = function(eventName) {\n      return __privateGet(this, _events).get(eventName) || [];\n    };\n    _removeListener = new WeakSet();\n    removeListener_fn = function(listeners, listener) {\n      const index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n      return [];\n    };\n    _wrapOnceListener = new WeakSet();\n    wrapOnceListener_fn = function(eventName, listener) {\n      const onceListener = (...data) => {\n        this.removeListener(eventName, onceListener);\n        listener.apply(this, data);\n      };\n      return onceListener;\n    };\n    _internalEmit = new WeakSet();\n    internalEmit_fn = function(internalEventName, eventName, listener) {\n      this.emit(\n        internalEventName,\n        ...[eventName, listener]\n      );\n    };\n    __publicField(Emitter2, \"defaultMaxListeners\", 10);\n    exports.Emitter = Emitter2;\n  }\n});\n\n// ../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/index.js\nvar require_lib = __commonJS({\n  \"../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/index.js\"(exports) {\n    \"use strict\";\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o, k2, desc);\n    } : function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_Emitter(), exports);\n    __exportStar(require_MemoryLeakError(), exports);\n  }\n});\n\n// src/messages.ts\nvar import_cuid = __toESM(require_cuid());\n\n// ../../node_modules/.pnpm/outvariant@1.4.0/node_modules/outvariant/lib/index.mjs\nvar POSITIONALS_EXP = /(%?)(%([sdjo]))/g;\nfunction serializePositional(positional, flag) {\n  switch (flag) {\n    case \"s\":\n      return positional;\n    case \"d\":\n    case \"i\":\n      return Number(positional);\n    case \"j\":\n      return JSON.stringify(positional);\n    case \"o\": {\n      if (typeof positional === \"string\") {\n        return positional;\n      }\n      const json = JSON.stringify(positional);\n      if (json === \"{}\" || json === \"[]\" || /^\\[object .+?\\]$/.test(json)) {\n        return positional;\n      }\n      return json;\n    }\n  }\n}\nfunction format(message, ...positionals) {\n  if (positionals.length === 0) {\n    return message;\n  }\n  let positionalIndex = 0;\n  let formattedMessage = message.replace(\n    POSITIONALS_EXP,\n    (match, isEscaped, _, flag) => {\n      const positional = positionals[positionalIndex];\n      const value = serializePositional(positional, flag);\n      if (!isEscaped) {\n        positionalIndex++;\n        return value;\n      }\n      return match;\n    }\n  );\n  if (positionalIndex < positionals.length) {\n    formattedMessage += ` ${positionals.slice(positionalIndex).join(\" \")}`;\n  }\n  formattedMessage = formattedMessage.replace(/%{2,2}/g, \"%\");\n  return formattedMessage;\n}\nvar STACK_FRAMES_TO_IGNORE = 2;\nfunction cleanErrorStack(error) {\n  if (!error.stack) {\n    return;\n  }\n  const nextStack = error.stack.split(\"\\n\");\n  nextStack.splice(1, STACK_FRAMES_TO_IGNORE);\n  error.stack = nextStack.join(\"\\n\");\n}\nvar InvariantError = class extends Error {\n  constructor(message, ...positionals) {\n    super(message);\n    this.message = message;\n    this.name = \"Invariant Violation\";\n    this.message = format(message, ...positionals);\n    cleanErrorStack(this);\n  }\n};\nvar invariant = (predicate, message, ...positionals) => {\n  if (!predicate) {\n    throw new InvariantError(message, ...positionals);\n  }\n};\ninvariant.as = (ErrorConstructor, predicate, message, ...positionals) => {\n  if (!predicate) {\n    const isConstructor = ErrorConstructor.prototype.name != null;\n    const error = isConstructor ? new ErrorConstructor(format(message, positionals)) : ErrorConstructor(format(message, positionals));\n    throw error;\n  }\n};\n\n// src/messages.ts\nvar import_deferred_promise = __toESM(require_build());\n\n// src/logger.ts\nvar FLAG = window.localStorage[\"CSB_EMULATOR_DEBUG\"];\nvar DEFAULT = \"\\x1B[0m\";\nvar GREEN = \"\\x1B[32;1m\";\nvar RED = \"\\x1B[31m\";\nvar BLUE = \"\\x1B[34m\";\nvar YELLOW = \"\\x1B[33;1m\";\nvar MAGENTA = \"\\x1B[35;1m\";\nvar CYAN = \"\\x1B[36;1m\";\nvar COLOR_SCOPE = {\n  preview: YELLOW,\n  emulator: MAGENTA,\n  runtime: CYAN,\n  bridge: BLUE,\n  \"runtime:worker\": CYAN\n};\nfunction createDebug(scope) {\n  return function debug3(message, ...data) {\n    if (FLAG === \"true\") {\n      const direction = () => {\n        if (message.includes(\"sender\"))\n          return `${GREEN}sender`;\n        if (message.includes(\"receiver\"))\n          return `${RED}receiver`;\n        return \"\";\n      };\n      const cleanMessage = message.replace(/\\[.+\\]:/, \"\");\n      console.debug(`${COLOR_SCOPE[scope]}${scope}:${direction()}${DEFAULT}:${cleanMessage}`, ...data);\n    }\n  };\n}\n\n// src/messages.ts\nvar debug = createDebug(\"emulator\");\nvar MessageReceiver = class {\n  emitter;\n  senderPort = null;\n  constructor() {\n    this.emitter = new EventTarget();\n    this.waitForHandshake();\n  }\n  waitForHandshake() {\n    const handshakePromise = new import_deferred_promise.DeferredPromise();\n    const handshakeListener = (message) => {\n      const { data } = message;\n      debug(\"[message-receiver]: incoming\", message);\n      if (data.type === \"internal/handshake\") {\n        invariant(\n          message.ports.length > 0,\n          \"Failed to confirm a MessageReceiver handshake: received event has no ports\"\n        );\n        this.senderPort = message.ports[0];\n        this.addMessageListener();\n        debug(\"[message-receiver]: handshake received!\", this.senderPort);\n        this.send(\"internal/handshake/done\");\n        debug(\"[message-receiver]: finish handshake\");\n      }\n    };\n    window.addEventListener(\"message\", handshakeListener);\n    handshakePromise.then(() => {\n      window.removeEventListener(\"message\", handshakeListener);\n    });\n    window.parent.postMessage({ type: \"internal/ready\" }, \"*\");\n    return handshakePromise;\n  }\n  addMessageListener() {\n    invariant(\n      this.senderPort,\n      \"[MessageReceiver] Failed to add a message listener: sender port is not defined. Did you forget to await a handshake?\"\n    );\n    this.senderPort.onmessage = (evt) => {\n      const data = evt.data;\n      if (data.type == null) {\n        return;\n      }\n      this.emitter.dispatchEvent(\n        new MessageEvent(data.type, {\n          data: data.payload\n        })\n      );\n    };\n  }\n  on(event, listener, options) {\n    this.emitter.addEventListener(\n      event,\n      async (message) => {\n        if (!(message instanceof MessageEvent)) {\n          return;\n        }\n        const { operationId, payload } = message.data;\n        try {\n          const listenerPayload = await listener(payload);\n          this.send(\"internal/operation/done\", { operationId, listenerPayload });\n        } catch (error) {\n          if (error instanceof Error) {\n            this.send(\"internal/operation/failed\", { operationId, error });\n          }\n        }\n      },\n      options\n    );\n  }\n  send(event, ...data) {\n    invariant(\n      this.senderPort,\n      '[MessageReceiver] Failed to send a message \"%j\": sender port is not defined. Did you forget to await a handshake?',\n      event\n    );\n    const payload = data[0] || {};\n    debug('[message-receiver]: send \"%s\"', event, payload);\n    this.senderPort.postMessage({ type: event, payload });\n  }\n};\nvar MessageSender = class {\n  constructor(target) {\n    this.target = target;\n    this.emitter = new EventTarget();\n    this.channel = new MessageChannel();\n    this.receiverPort = this.channel.port1;\n    const receiverReadyPromise = new import_deferred_promise.DeferredPromise();\n    const handshakeListener = (message) => {\n      if (message.data.type === \"internal/ready\") {\n        debug(\"[message-sender]: runtime is ready\");\n        receiverReadyPromise.resolve();\n      }\n    };\n    window.addEventListener(\"message\", handshakeListener);\n    receiverReadyPromise.then(() => {\n      window.removeEventListener(\"message\", handshakeListener);\n    });\n    this.receiverReadyPromise = receiverReadyPromise;\n    this.receiverPort.onmessage = (evt) => {\n      const data = evt.data;\n      if (data.type != null) {\n        debug('[message-sender]: emitting \"%s\" event...', data.type, data.payload);\n        this.emitter.dispatchEvent(new MessageEvent(data.type, { data: data.payload }));\n      }\n    };\n  }\n  emitter;\n  channel;\n  receiverPort;\n  receiverReadyPromise;\n  async handshake() {\n    const handshakePromise = new import_deferred_promise.DeferredPromise();\n    await this.receiverReadyPromise;\n    debug(\"[message-sender]: sending handshake\");\n    this.target.postMessage(\n      {\n        type: \"internal/handshake\"\n      },\n      \"*\",\n      [this.channel.port2]\n    );\n    this.on(\"internal/handshake/done\", () => {\n      handshakePromise.resolve();\n      clearTimeout(rejectionTimeout);\n    });\n    const rejectionTimeout = setTimeout(() => {\n      handshakePromise.reject(new Error(\"MessageSender: Handshake timeout\"));\n    }, 5e3);\n    return handshakePromise;\n  }\n  on(event, listener, options) {\n    debug('[message-sender]: add listener \"%s\"', event);\n    this.emitter.addEventListener(\n      event,\n      (message) => {\n        if (message instanceof MessageEvent) {\n          listener(message);\n        }\n      },\n      options\n    );\n  }\n  off(event, listener, options) {\n    this.emitter.removeEventListener(event, listener, options);\n  }\n  async send(event, ...data) {\n    const operationPromise = new import_deferred_promise.DeferredPromise();\n    const operationId = (0, import_cuid.default)();\n    const payload = data[0] || {};\n    debug('[message-sender]: send \"%s\" (%s)', event, operationId, payload);\n    this.receiverPort.postMessage({ type: event, payload: { operationId, payload } });\n    debug('[message-sender]: adding done listener for \"%s\" (%s)', event, operationId);\n    const handleOperationDone = (doneEvent) => {\n      const { data: data2 } = doneEvent;\n      if (data2.operationId === operationId) {\n        const listenerPayload = data2.listenerPayload || {};\n        debug('[message-sender]: resolving \"%s (%s) promise!', event, operationId);\n        operationPromise.resolve({\n          ...listenerPayload,\n          operationId: data2.operationId\n        });\n      }\n    };\n    const handleOperationFailed = (failEvent) => {\n      const { data: data2 } = failEvent;\n      if (data2.operationId === operationId) {\n        debug('[message-sender]: rejecting \"%s (%s) promise!', event, operationId);\n        operationPromise.reject(data2.error);\n      }\n    };\n    this.on(\"internal/operation/done\", handleOperationDone);\n    this.on(\"internal/operation/failed\", handleOperationFailed);\n    return operationPromise.finally(() => {\n      this.emitter.removeEventListener(\"internal/operation/done\", handleOperationDone);\n      this.emitter.removeEventListener(\"internal/operation/failed\", handleOperationFailed);\n    });\n  }\n};\n\n// src/Nodebox.ts\nvar import_deferred_promise3 = __toESM(require_build());\n\n// src/modules/fs.ts\nvar import_cuid2 = __toESM(require_cuid());\nvar FileSystemApi = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  async init(files) {\n    await this.channel.send(\"fs/init\", { files });\n  }\n  async readFile(path, encoding) {\n    const response = await this.channel.send(\"fs/readFile\", { path, encoding }).catch((error) => {\n      throw new Error(format('Failed to read file at path \"%s\"', path), { cause: error });\n    });\n    if (!response) {\n      throw new Error(\"File not found\");\n    }\n    return response.data;\n  }\n  async writeFile(path, content, options) {\n    let encoding = void 0;\n    let recursive = false;\n    if (typeof options === \"object\") {\n      encoding = options.encoding;\n      recursive = !!options.recursive;\n    } else if (typeof options === \"string\") {\n      encoding = options;\n    }\n    await this.channel.send(\"fs/writeFile\", { path, content, encoding, recursive }).catch((error) => {\n      throw new Error(format('Failed to write file at path \"%s\"', path), { cause: error });\n    });\n  }\n  async readdir(path) {\n    const response = await this.channel.send(\"fs/readdir\", { path }).catch((error) => {\n      throw new Error(format('Failed to read directory at path \"%s\"', path), { cause: error });\n    });\n    if (!response) {\n      throw new Error(\"Directory not found\");\n    }\n    return response.data;\n  }\n  async mkdir(path, options) {\n    const recursive = !!options?.recursive;\n    await this.channel.send(\"fs/mkdir\", { path, recursive }).catch((error) => {\n      throw new Error(format('Failed to make directory at path \"%s\"', path), { cause: error });\n    });\n  }\n  async stat(path) {\n    const response = await this.channel.send(\"fs/stat\", { path }).catch((error) => {\n      throw new Error(format('Failed to stat file at path \"%s\"', path), { cause: error });\n    });\n    if (!response) {\n      throw new Error(\"File not found\");\n    }\n    return response.data;\n  }\n  async rm(path, options) {\n    const { force, recursive } = options || {};\n    await this.channel.send(\"fs/rm\", { path, force, recursive }).catch((error) => {\n      throw new Error(format('Failed to remove file at path \"%s\"', path), { cause: error });\n    });\n  }\n  async watch(includes, excludes, listener) {\n    const watcherId = (0, import_cuid2.default)();\n    await this.channel.send(\"fs/watch\", { watcherId, includes, excludes });\n    this.channel.on(\"fs/watch-event\", ({ data }) => {\n      if (data.watcherId === watcherId && listener) {\n        const evt = { ...data };\n        delete evt.watcherId;\n        listener(evt);\n      }\n    });\n    return {\n      dispose: () => this.channel.send(\"fs/unwatch\", { watcherId })\n    };\n  }\n};\n\n// src/modules/shell.ts\nvar import_strict_event_emitter = __toESM(require_lib());\nvar ShellApi = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  create() {\n    return new ShellProcess(this.channel);\n  }\n};\nvar ShellProcess = class {\n  constructor(channel) {\n    this.channel = channel;\n    this.state = \"running\";\n    this.stdout = new import_strict_event_emitter.Emitter();\n    this.stderr = new import_strict_event_emitter.Emitter();\n    this.stdin = {\n      write: (data) => {\n        if (!this.id) {\n          throw new Error(\"Failed to write to stdin, no process is currently running\");\n        }\n        return this.channel.send(\"shell/stdin\", { data, workerId: this.id });\n      }\n    };\n    this.forwardStdEvents();\n  }\n  id;\n  state;\n  stdout;\n  stderr;\n  stdin;\n  forwardStdEvents() {\n    this.channel.on(\"worker/tty\", (message) => {\n      const { data } = message;\n      if (data.workerId !== this.id) {\n        return;\n      }\n      switch (data.payload.type) {\n        case \"out\": {\n          this.stdout.emit(\"data\", data.payload.data);\n          break;\n        }\n        case \"err\": {\n          this.stderr.emit(\"data\", data.payload.data);\n          break;\n        }\n      }\n    });\n  }\n  async runCommand(command, args, options = {}) {\n    invariant(!this.id, 'Failed to run \"runCommand\" on a ShellProcess: there is already a process running.');\n    const shellInfo = await this.channel.send(\"shell/runCommand\", { command, args, options });\n    invariant(shellInfo, 'Failed to run \"runCommand\" on a ShellProcess: was not able to retrieve a running process.');\n    this.id = shellInfo.id;\n    this.state = \"running\";\n    return shellInfo;\n  }\n  async on(message, listener) {\n    switch (message) {\n      case \"progress\": {\n        this.channel.on(\"worker/progress\", ({ data }) => {\n          listener(data.status);\n        });\n        return;\n      }\n      case \"exit\": {\n        this.channel.on(\"worker/exit\", ({ data }) => {\n          if (data.workerId === this.id) {\n            listener(data.exitCode, data.error);\n          }\n        });\n        return;\n      }\n    }\n  }\n  async kill() {\n    invariant(\n      this.id,\n      'Failed to run \"kill\" on a ShellProcess: there is no process running. Did you forget to run it?'\n    );\n    this.state = \"idle\";\n    await this.channel.send(\"shell/exit\", { id: this.id }).catch((error) => {\n      throw new Error(format('Failed to kill shell with ID \"%s\"', this.id), { cause: error });\n    });\n    this.id = void 0;\n  }\n};\n\n// src/modules/preview.ts\nvar import_deferred_promise2 = __toESM(require_build());\nvar TIMEOUT = 2e4;\nvar PreviewApi = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  async waitFor(payload, predicate, timeout = TIMEOUT) {\n    const readyPromise = new import_deferred_promise2.DeferredPromise();\n    const rejectTimeout = setTimeout(() => {\n      readyPromise.reject();\n    }, timeout);\n    const previewInformation = await this.channel.send(\"preview/get/info\", payload).catch((error) => {\n      readyPromise.reject(\n        new Error(\n          format(\n            'Failed to look up preview information for shell ID \"%s\" (port: %d)',\n            payload.sourceShellId,\n            payload.port\n          )\n        )\n      );\n    });\n    const foundPreview = previewInformation && predicate(previewInformation);\n    if (foundPreview) {\n      readyPromise.resolve({\n        url: previewInformation.url,\n        port: previewInformation.port,\n        sourceShellId: previewInformation.sourceShellId\n      });\n    }\n    this.channel.on(\"preview/port/ready\", ({ data }) => {\n      if (!foundPreview && predicate(data)) {\n        readyPromise.resolve({\n          url: data.url,\n          port: data.port,\n          sourceShellId: data.sourceShellId\n        });\n      }\n    });\n    return readyPromise.finally(() => {\n      clearTimeout(rejectTimeout);\n    });\n  }\n  async getByShellId(sourceShellId, timeout) {\n    return this.waitFor({ sourceShellId }, (data) => data.sourceShellId === sourceShellId, timeout).catch((error) => {\n      throw new Error(format('Failed to get shell by ID \"%s\"', sourceShellId), { cause: error });\n    });\n  }\n  async waitForPort(port, timeout) {\n    return this.waitFor({ port }, (data) => data.port === port, timeout).catch((error) => {\n      throw new Error(format(\"Failed to await port %d\", port), { cause: error });\n    });\n  }\n};\n\n// src/Nodebox.ts\nvar DEFAULT_RUNTIME_URL = \"https://nodebox-runtime.codesandbox.io\";\nvar debug2 = createDebug(\"emulator\");\nvar Nodebox = class {\n  constructor(options) {\n    this.options = options;\n    invariant(\n      this.options.iframe,\n      'Failed to create a Nodebox: expected \"iframe\" argument to be a reference to an <iframe> element but got %j',\n      this.options.iframe\n    );\n    this.url = this.options.runtimeUrl || DEFAULT_RUNTIME_URL;\n    this.isConnected = false;\n  }\n  channel = null;\n  isConnected;\n  url;\n  fileSystemApi = null;\n  shellApi = null;\n  previewApi = null;\n  async connect() {\n    const { iframe, cdnUrl } = this.options;\n    debug2(\"[message-sender]: Connecting to node emulator...\");\n    const connectionPromise = new import_deferred_promise3.DeferredPromise();\n    if (!this.url) {\n      connectionPromise.reject(\n        new Error(\"Nodebox URL is missing. Did you forget to provide it when creating this Nodebox instance?\")\n      );\n    }\n    invariant(\n      iframe.contentWindow,\n      \"Failed to create a MessageChannel with the Nodebox iframe: no content window found\"\n    );\n    this.channel = new MessageSender(iframe.contentWindow);\n    const frameLoadPromise = new import_deferred_promise3.DeferredPromise();\n    iframe.setAttribute(\"src\", this.url);\n    iframe.addEventListener(\n      \"load\",\n      () => {\n        frameLoadPromise.resolve();\n      },\n      { once: true }\n    );\n    iframe.addEventListener(\n      \"error\",\n      (event) => {\n        frameLoadPromise.reject(event.error);\n      },\n      { once: true }\n    );\n    await frameLoadPromise;\n    debug2(\"[message-sender]: IFrame loaded...\");\n    await this.channel.handshake();\n    debug2(\"[message-sender]: Handshake completed...\");\n    this.channel.send(\"connect\", {\n      cdnUrl\n    });\n    this.channel.on(\"runtime/ready\", () => {\n      connectionPromise.resolve();\n    });\n    return connectionPromise.then(() => {\n      debug2(\"[message-sender]: Connected to runtime...\");\n      this.isConnected = true;\n    });\n  }\n  get fs() {\n    invariant(\n      this.isConnected,\n      'Failed to access the File System API: consumer is not connected. Did you forget to run \"connect()\"?'\n    );\n    if (this.fileSystemApi) {\n      return this.fileSystemApi;\n    }\n    this.fileSystemApi = new FileSystemApi(this.channel);\n    return this.fileSystemApi;\n  }\n  get shell() {\n    invariant(\n      this.isConnected,\n      'Failed to access the Shell API: consumer is not connected. Did you forget to run \"connect()\"?'\n    );\n    if (this.shellApi) {\n      return this.shellApi;\n    }\n    this.shellApi = new ShellApi(this.channel);\n    return this.shellApi;\n  }\n  get preview() {\n    invariant(\n      this.isConnected,\n      'Failed to access the Preview API: consumer is not connected. Did you forget to run \"connect()\"?'\n    );\n    if (this.previewApi) {\n      return this.previewApi;\n    }\n    this.previewApi = new PreviewApi(this.channel);\n    return this.previewApi;\n  }\n};\n\n// src/runtime-protocol.types.ts\nvar INJECT_MESSAGE_TYPE = \"INJECT_AND_INVOKE\";\nvar PREVIEW_LOADED_MESSAGE_TYPE = \"PREVIEW_LOADED\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@codesandbox/nodebox/build/index.mjs\n"));

/***/ }),

/***/ "./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: function() { return /* binding */ SandpackClient; }\n/* harmony export */ });\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dequal */ \"./node_modules/dequal/dist/index.mjs\");\n\n\nvar SandpackClient = /** @class */ (function () {\n    function SandpackClient(iframeSelector, sandboxSetup, options) {\n        if (options === void 0) { options = {}; }\n        this.status = \"idle\";\n        this.options = options;\n        this.sandboxSetup = sandboxSetup;\n        this.iframeSelector = iframeSelector;\n    }\n    /**\n     * Clients handles\n     */\n    SandpackClient.prototype.updateOptions = function (options) {\n        if (!(0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(this.options, options)) {\n            this.options = options;\n            this.updateSandbox();\n        }\n    };\n    SandpackClient.prototype.updateSandbox = function (_sandboxSetup, _isInitializationCompile) {\n        if (_sandboxSetup === void 0) { _sandboxSetup = this.sandboxSetup; }\n        throw Error(\"Method not implemented\");\n    };\n    SandpackClient.prototype.destroy = function () {\n        throw Error(\"Method not implemented\");\n    };\n    /**\n     * Bundler communication\n     */\n    SandpackClient.prototype.dispatch = function (_message) {\n        throw Error(\"Method not implemented\");\n    };\n    SandpackClient.prototype.listen = function (_listener) {\n        throw Error(\"Method not implemented\");\n    };\n    return SandpackClient;\n}());\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudC9kaXN0L2Jhc2UtODBhMWY3NjAubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdDOztBQUVoQztBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOENBQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUU4QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudC9kaXN0L2Jhc2UtODBhMWY3NjAubWpzPzhlZmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVxdWFsIH0gZnJvbSAnZGVxdWFsJztcblxudmFyIFNhbmRwYWNrQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNhbmRwYWNrQ2xpZW50KGlmcmFtZVNlbGVjdG9yLCBzYW5kYm94U2V0dXAsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdGhpcy5zdGF0dXMgPSBcImlkbGVcIjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5zYW5kYm94U2V0dXAgPSBzYW5kYm94U2V0dXA7XG4gICAgICAgIHRoaXMuaWZyYW1lU2VsZWN0b3IgPSBpZnJhbWVTZWxlY3RvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xpZW50cyBoYW5kbGVzXG4gICAgICovXG4gICAgU2FuZHBhY2tDbGllbnQucHJvdG90eXBlLnVwZGF0ZU9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBpZiAoIWRlcXVhbCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTYW5kYm94KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhbmRwYWNrQ2xpZW50LnByb3RvdHlwZS51cGRhdGVTYW5kYm94ID0gZnVuY3Rpb24gKF9zYW5kYm94U2V0dXAsIF9pc0luaXRpYWxpemF0aW9uQ29tcGlsZSkge1xuICAgICAgICBpZiAoX3NhbmRib3hTZXR1cCA9PT0gdm9pZCAwKSB7IF9zYW5kYm94U2V0dXAgPSB0aGlzLnNhbmRib3hTZXR1cDsgfVxuICAgICAgICB0aHJvdyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfTtcbiAgICBTYW5kcGFja0NsaWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQnVuZGxlciBjb21tdW5pY2F0aW9uXG4gICAgICovXG4gICAgU2FuZHBhY2tDbGllbnQucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKF9tZXNzYWdlKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9O1xuICAgIFNhbmRwYWNrQ2xpZW50LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiAoX2xpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9O1xuICAgIHJldHVybiBTYW5kcGFja0NsaWVudDtcbn0oKSk7XG5cbmV4cG9ydCB7IFNhbmRwYWNrQ2xpZW50IGFzIFMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs\n"));

/***/ }),

/***/ "./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandpackNode: function() { return /* binding */ SandpackNode; }\n/* harmony export */ });\n/* harmony import */ var _types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types-0877c553.mjs */ \"./node_modules/@codesandbox/sandpack-client/dist/types-0877c553.mjs\");\n/* harmony import */ var _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codesandbox/nodebox */ \"./node_modules/@codesandbox/nodebox/build/index.mjs\");\n/* harmony import */ var _base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../base-80a1f760.mjs */ \"./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs\");\n/* harmony import */ var _consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../consoleHook-cdbe54ab.mjs */ \"./node_modules/@codesandbox/sandpack-client/dist/consoleHook-cdbe54ab.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! outvariant */ \"./node_modules/@codesandbox/sandpack-client/node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal */ \"./node_modules/dequal/dist/index.mjs\");\n\n\n\n\n\n\n\nfunction loadPreviewIframe(iframe, url) {\n    return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n        var contentWindow, TIME_OUT, MAX_MANY_TIRES, tries, timeout;\n        return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n            contentWindow = iframe.contentWindow;\n            (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(contentWindow, \"Failed to await preview iframe: no content window found\");\n            TIME_OUT = 90000;\n            MAX_MANY_TIRES = 20;\n            tries = 0;\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n                    var triesToSetUrl = function () {\n                        var onLoadPage = function () {\n                            clearTimeout(timeout);\n                            tries = MAX_MANY_TIRES;\n                            resolve();\n                            iframe.removeEventListener(\"load\", onLoadPage);\n                        };\n                        if (tries >= MAX_MANY_TIRES) {\n                            reject((0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(\"Could not able to connect to preview.\"));\n                            return;\n                        }\n                        iframe.setAttribute(\"src\", url);\n                        timeout = setTimeout(function () {\n                            triesToSetUrl();\n                            iframe.removeEventListener(\"load\", onLoadPage);\n                        }, TIME_OUT);\n                        tries = tries + 1;\n                        iframe.addEventListener(\"load\", onLoadPage);\n                    };\n                    iframe.addEventListener(\"error\", function () { return reject(new Error(\"Iframe error\")); });\n                    iframe.addEventListener(\"abort\", function () { return reject(new Error(\"Aborted\")); });\n                    triesToSetUrl();\n                })];\n        });\n    });\n}\nvar setPreviewIframeProperties = function (iframe, options) {\n    iframe.style.border = \"0\";\n    iframe.style.width = options.width || \"100%\";\n    iframe.style.height = options.height || \"100%\";\n    iframe.style.overflow = \"hidden\";\n    iframe.allow = \"cross-origin-isolated\";\n};\n\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/explicit-function-return-type, no-restricted-globals, @typescript-eslint/no-explicit-any  */\nfunction setupHistoryListeners(_a) {\n    var scope = _a.scope;\n    // @ts-ignore\n    var origHistoryProto = window.history.__proto__;\n    var historyList = [];\n    var historyPosition = 0;\n    var dispatchMessage = function (url) {\n        parent.postMessage({\n            type: \"urlchange\",\n            url: url,\n            back: historyPosition > 0,\n            forward: historyPosition < historyList.length - 1,\n            channelId: scope.channelId,\n        }, \"*\");\n    };\n    function pushHistory(url, state) {\n        // remove \"future\" locations\n        historyList.splice(historyPosition + 1);\n        historyList.push({ url: url, state: state });\n        historyPosition = historyList.length - 1;\n    }\n    Object.assign(window.history, {\n        go: function (delta) {\n            var newPos = historyPosition + delta;\n            if (newPos >= 0 && newPos <= historyList.length - 1) {\n                historyPosition = newPos;\n                var _a = historyList[historyPosition], url = _a.url, state = _a.state;\n                origHistoryProto.replaceState.call(window.history, state, \"\", url);\n                var newURL = document.location.href;\n                dispatchMessage(newURL);\n                window.dispatchEvent(new PopStateEvent(\"popstate\", { state: state }));\n            }\n        },\n        back: function () {\n            window.history.go(-1);\n        },\n        forward: function () {\n            window.history.go(1);\n        },\n        pushState: function (state, title, url) {\n            origHistoryProto.replaceState.call(window.history, state, title, url);\n            pushHistory(url, state);\n            dispatchMessage(document.location.href);\n        },\n        replaceState: function (state, title, url) {\n            origHistoryProto.replaceState.call(window.history, state, title, url);\n            historyList[historyPosition] = { state: state, url: url };\n            dispatchMessage(document.location.href);\n        },\n    });\n    function handleMessage(_a) {\n        var data = _a.data;\n        if (data.type === \"urlback\") {\n            history.back();\n        }\n        else if (data.type === \"urlforward\") {\n            history.forward();\n        }\n        else if (data.type === \"refresh\") {\n            document.location.reload();\n        }\n    }\n    window.addEventListener(\"message\", handleMessage);\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction watchResize(_a) {\n    var scope = _a.scope;\n    var lastHeight = 0;\n    function getDocumentHeight() {\n        if (typeof window === \"undefined\")\n            return 0;\n        var body = document.body;\n        var html = document.documentElement;\n        return Math.max(body.scrollHeight, body.offsetHeight, html.offsetHeight);\n    }\n    function sendResizeEvent() {\n        var height = getDocumentHeight();\n        if (lastHeight !== height) {\n            window.parent.postMessage({\n                type: \"resize\",\n                height: height,\n                codesandbox: true,\n                channelId: scope.channelId,\n            }, \"*\");\n        }\n        lastHeight = height;\n    }\n    sendResizeEvent();\n    var throttle;\n    var observer = new MutationObserver(function () {\n        if (throttle === undefined) {\n            sendResizeEvent();\n            throttle = setTimeout(function () {\n                throttle = undefined;\n            }, 300);\n        }\n    });\n    observer.observe(document, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n    });\n    /**\n     * Ideally we should only use a `MutationObserver` to trigger a resize event,\n     * however, we noted that it's not 100% reliable, so we went for polling strategy as well\n     */\n    setInterval(sendResizeEvent, 300);\n}\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nvar scripts = [\n    { code: setupHistoryListeners.toString(), id: \"historyListener\" },\n    {\n        code: \"function consoleHook({ scope }) {\" + _consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.c + \"\\n};\",\n        id: \"consoleHook\",\n    },\n    { code: watchResize.toString(), id: \"watchResize\" },\n];\nvar injectScriptToIframe = function (iframe, channelId) {\n    scripts.forEach(function (_a) {\n        var _b;\n        var code = _a.code, id = _a.id;\n        var message = {\n            uid: id,\n            type: _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__.INJECT_MESSAGE_TYPE,\n            code: \"exports.activate = \".concat(code),\n            scope: { channelId: channelId },\n        };\n        (_b = iframe.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage(message, \"*\");\n    });\n};\n\n/* eslint-disable no-console,@typescript-eslint/no-explicit-any,prefer-rest-params,@typescript-eslint/explicit-module-boundary-types */\nvar SandpackNode = /** @class */ (function (_super) {\n    (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(SandpackNode, _super);\n    function SandpackNode(selector, sandboxInfo, options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, selector, sandboxInfo, (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, options), { bundlerURL: options.bundlerURL })) || this;\n        _this._modulesCache = new Map();\n        _this.messageChannelId = (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.g)();\n        _this._initPromise = null;\n        _this.emitter = new _consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.E();\n        // Assign iframes\n        _this.manageIframes(selector);\n        // Init emulator\n        _this.emulator = new _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__.Nodebox({\n            iframe: _this.emulatorIframe,\n            runtimeUrl: _this.options.bundlerURL,\n        });\n        // Trigger initial compile\n        _this.updateSandbox(sandboxInfo);\n        return _this;\n    }\n    // Initialize nodebox, should only ever be called once\n    SandpackNode.prototype._init = function (files) {\n        return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.emulator.connect()];\n                    case 1:\n                        _a.sent();\n                        // 2. Setup\n                        return [4 /*yield*/, this.emulator.fs.init(files)];\n                    case 2:\n                        // 2. Setup\n                        _a.sent();\n                        // 2.1 Other dependencies\n                        return [4 /*yield*/, this.globalListeners()];\n                    case 3:\n                        // 2.1 Other dependencies\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * It initializes the emulator and provide it with files, template and script to run\n     */\n    SandpackNode.prototype.compile = function (files) {\n        return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var shellId, err_1;\n            return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 5, , 6]);\n                        // 1. Init\n                        this.status = \"initializing\";\n                        this.dispatch({ type: \"start\", firstLoad: true });\n                        if (!this._initPromise) {\n                            this._initPromise = this._init(files);\n                        }\n                        return [4 /*yield*/, this._initPromise];\n                    case 1:\n                        _a.sent();\n                        this.dispatch({ type: \"connected\" });\n                        return [4 /*yield*/, this.createShellProcessFromTask(files)];\n                    case 2:\n                        shellId = (_a.sent()).id;\n                        // 4. Launch Preview\n                        return [4 /*yield*/, this.createPreviewURLFromId(shellId)];\n                    case 3:\n                        // 4. Launch Preview\n                        _a.sent();\n                        return [4 /*yield*/, this.setLocationURLIntoIFrame()];\n                    case 4:\n                        _a.sent();\n                        // 5. Returns to consumer\n                        this.dispatchDoneMessage();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        err_1 = _a.sent();\n                        this.dispatch({\n                            type: \"action\",\n                            action: \"notification\",\n                            notificationType: \"error\",\n                            title: (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(err_1),\n                        });\n                        this.dispatch({ type: \"done\", compilatonError: true });\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * It creates a new shell and run the starting task\n     */\n    SandpackNode.prototype.createShellProcessFromTask = function (files) {\n        return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var packageJsonContent;\n            var _a;\n            var _this = this;\n            return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        packageJsonContent = (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.r)(files[\"/package.json\"]);\n                        this.emulatorCommand = (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.b)(packageJsonContent);\n                        this.emulatorShellProcess = this.emulator.shell.create();\n                        // Shell listeners\n                        return [4 /*yield*/, this.emulatorShellProcess.on(\"exit\", function (exitCode) {\n                                _this.dispatch({\n                                    type: \"action\",\n                                    action: \"notification\",\n                                    notificationType: \"error\",\n                                    title: (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(\"Error: process.exit(\".concat(exitCode, \") called.\")),\n                                });\n                            })];\n                    case 1:\n                        // Shell listeners\n                        _b.sent();\n                        return [4 /*yield*/, this.emulatorShellProcess.on(\"progress\", function (data) {\n                                var _a, _b;\n                                if (data.state === \"command_running\" ||\n                                    data.state === \"starting_command\") {\n                                    _this.dispatch({\n                                        type: \"shell/progress\",\n                                        data: (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, data), { command: [\n                                                (_a = _this.emulatorCommand) === null || _a === void 0 ? void 0 : _a[0],\n                                                (_b = _this.emulatorCommand) === null || _b === void 0 ? void 0 : _b[1].join(\" \"),\n                                            ].join(\" \") }),\n                                    });\n                                    _this.status = \"installing-dependencies\";\n                                    return;\n                                }\n                                _this.dispatch({ type: \"shell/progress\", data: data });\n                            })];\n                    case 2:\n                        _b.sent();\n                        this.emulatorShellProcess.stdout.on(\"data\", function (data) {\n                            _this.dispatch({ type: \"stdout\", payload: { data: data, type: \"out\" } });\n                        });\n                        this.emulatorShellProcess.stderr.on(\"data\", function (data) {\n                            _this.dispatch({ type: \"stdout\", payload: { data: data, type: \"err\" } });\n                        });\n                        return [4 /*yield*/, (_a = this.emulatorShellProcess).runCommand.apply(_a, this.emulatorCommand)];\n                    case 3: return [2 /*return*/, _b.sent()];\n                }\n            });\n        });\n    };\n    SandpackNode.prototype.createPreviewURLFromId = function (id) {\n        var _a;\n        return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var url;\n            return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.iframePreviewUrl = undefined;\n                        return [4 /*yield*/, this.emulator.preview.getByShellId(id)];\n                    case 1:\n                        url = (_b.sent()).url;\n                        this.iframePreviewUrl = url + ((_a = this.options.startRoute) !== null && _a !== void 0 ? _a : \"\");\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Nodebox needs to handle two types of iframes at the same time:\n     *\n     * 1. Runtime iframe: where the emulator process runs, which is responsible\n     *    for creating the other iframes (hidden);\n     * 2. Preview iframes: any other node process that contains a PORT (public);\n     */\n    SandpackNode.prototype.manageIframes = function (selector) {\n        var _a;\n        /**\n         * Pick the preview iframe\n         */\n        if (typeof selector === \"string\") {\n            var element = document.querySelector(selector);\n            (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(element, \"The element '\".concat(selector, \"' was not found\"));\n            this.iframe = document.createElement(\"iframe\");\n        }\n        else {\n            this.iframe = selector;\n        }\n        // Set preview iframe styles\n        setPreviewIframeProperties(this.iframe, this.options);\n        (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(this.iframe.parentNode, \"The given iframe does not have a parent.\");\n        /**\n         * Create the runtime iframe, which is hidden sibling\n         * from the preview one\n         */\n        this.emulatorIframe = document.createElement(\"iframe\");\n        this.emulatorIframe.classList.add(\"sp-bridge-frame\");\n        (_a = this.iframe.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(this.emulatorIframe);\n    };\n    SandpackNode.prototype.setLocationURLIntoIFrame = function () {\n        return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.iframePreviewUrl) return [3 /*break*/, 2];\n                        return [4 /*yield*/, loadPreviewIframe(this.iframe, this.iframePreviewUrl)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Send all messages and events to tell to the\n     * consumer that the bundler is ready without any error\n     */\n    SandpackNode.prototype.dispatchDoneMessage = function () {\n        this.status = \"done\";\n        this.dispatch({ type: \"done\", compilatonError: false });\n        if (this.iframePreviewUrl) {\n            this.dispatch({\n                type: \"urlchange\",\n                url: this.iframePreviewUrl,\n                back: false,\n                forward: false,\n            });\n        }\n    };\n    SandpackNode.prototype.globalListeners = function () {\n        return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var _this = this;\n            return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        window.addEventListener(\"message\", function (event) {\n                            if (event.data.type === _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__.PREVIEW_LOADED_MESSAGE_TYPE) {\n                                injectScriptToIframe(_this.iframe, _this.messageChannelId);\n                            }\n                            if (event.data.type === \"urlchange\" &&\n                                event.data.channelId === _this.messageChannelId) {\n                                _this.dispatch({\n                                    type: \"urlchange\",\n                                    url: event.data.url,\n                                    back: event.data.back,\n                                    forward: event.data.forward,\n                                });\n                            }\n                            else if (event.data.channelId === _this.messageChannelId) {\n                                _this.dispatch(event.data);\n                            }\n                        });\n                        return [4 /*yield*/, this.emulator.fs.watch([\"*\"], [\n                                \".next\",\n                                \"node_modules\",\n                                \"build\",\n                                \"dist\",\n                                \"vendor\",\n                                \".config\",\n                                \".vuepress\",\n                            ], function (message) { return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__._)(_this, void 0, void 0, function () {\n                                var event, path, type, _a, content, newContent, err_2;\n                                return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            if (!message)\n                                                return [2 /*return*/];\n                                            event = message;\n                                            path = \"newPath\" in event\n                                                ? event.newPath\n                                                : \"path\" in event\n                                                    ? event.path\n                                                    : \"\";\n                                            return [4 /*yield*/, this.emulator.fs.stat(path)];\n                                        case 1:\n                                            type = (_b.sent()).type;\n                                            if (type !== \"file\")\n                                                return [2 /*return*/, null];\n                                            _b.label = 2;\n                                        case 2:\n                                            _b.trys.push([2, 10, , 11]);\n                                            _a = event.type;\n                                            switch (_a) {\n                                                case \"change\": return [3 /*break*/, 3];\n                                                case \"create\": return [3 /*break*/, 3];\n                                                case \"remove\": return [3 /*break*/, 5];\n                                                case \"rename\": return [3 /*break*/, 6];\n                                                case \"close\": return [3 /*break*/, 8];\n                                            }\n                                            return [3 /*break*/, 9];\n                                        case 3: return [4 /*yield*/, this.emulator.fs.readFile(event.path, \"utf8\")];\n                                        case 4:\n                                            content = _b.sent();\n                                            this.dispatch({\n                                                type: \"fs/change\",\n                                                path: event.path,\n                                                content: content,\n                                            });\n                                            this._modulesCache.set(event.path, (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.w)(content));\n                                            return [3 /*break*/, 9];\n                                        case 5:\n                                            this.dispatch({\n                                                type: \"fs/remove\",\n                                                path: event.path,\n                                            });\n                                            this._modulesCache.delete(event.path);\n                                            return [3 /*break*/, 9];\n                                        case 6:\n                                            this.dispatch({\n                                                type: \"fs/remove\",\n                                                path: event.oldPath,\n                                            });\n                                            this._modulesCache.delete(event.oldPath);\n                                            return [4 /*yield*/, this.emulator.fs.readFile(event.newPath, \"utf8\")];\n                                        case 7:\n                                            newContent = _b.sent();\n                                            this.dispatch({\n                                                type: \"fs/change\",\n                                                path: event.newPath,\n                                                content: newContent,\n                                            });\n                                            this._modulesCache.set(event.newPath, (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.w)(newContent));\n                                            return [3 /*break*/, 9];\n                                        case 8: return [3 /*break*/, 9];\n                                        case 9: return [3 /*break*/, 11];\n                                        case 10:\n                                            err_2 = _b.sent();\n                                            this.dispatch({\n                                                type: \"action\",\n                                                action: \"notification\",\n                                                notificationType: \"error\",\n                                                title: (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(err_2),\n                                            });\n                                            return [3 /*break*/, 11];\n                                        case 11: return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * PUBLIC Methods\n     */\n    SandpackNode.prototype.restartShellProcess = function () {\n        var _a;\n        return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(this.emulatorShellProcess && this.emulatorCommand)) return [3 /*break*/, 3];\n                        // 1. Set the loading state and clean the URL\n                        this.dispatch({ type: \"start\", firstLoad: true });\n                        this.status = \"initializing\";\n                        // 2. Exit shell\n                        return [4 /*yield*/, this.emulatorShellProcess.kill()];\n                    case 1:\n                        // 2. Exit shell\n                        _b.sent();\n                        (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.removeAttribute(\"attr\");\n                        this.emulator.fs.rm(\"/node_modules/.vite\", {\n                            recursive: true,\n                            force: true,\n                        });\n                        // 3 Run command again\n                        return [4 /*yield*/, this.compile(Object.fromEntries(this._modulesCache))];\n                    case 2:\n                        // 3 Run command again\n                        _b.sent();\n                        _b.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SandpackNode.prototype.updateSandbox = function (setup) {\n        var _this = this;\n        var _a;\n        var modules = (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.f)(setup.files);\n        /**\n         * Update file changes\n         */\n        if (((_a = this.emulatorShellProcess) === null || _a === void 0 ? void 0 : _a.state) === \"running\") {\n            Object.entries(modules).forEach(function (_a) {\n                var key = _a[0], value = _a[1];\n                if (!_this._modulesCache.get(key) ||\n                    (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.r)(value) !== (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.r)(_this._modulesCache.get(key))) {\n                    _this.emulator.fs.writeFile(key, value, { recursive: true });\n                }\n            });\n            return;\n        }\n        /**\n         * Pass init files to the bundler\n         */\n        this.dispatch({\n            codesandbox: true,\n            modules: modules,\n            template: setup.template,\n            type: \"compile\",\n        });\n        /**\n         * Add modules to cache, this will ensure uniqueness changes\n         *\n         * Keep it after the compile action, in order to update the cache at the right moment\n         */\n        Object.entries(modules).forEach(function (_a) {\n            var key = _a[0], value = _a[1];\n            _this._modulesCache.set(key, (0,_consoleHook_cdbe54ab_mjs__WEBPACK_IMPORTED_MODULE_4__.w)(value));\n        });\n    };\n    SandpackNode.prototype.dispatch = function (message) {\n        var _a, _b;\n        return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var _c;\n            return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _c = message.type;\n                        switch (_c) {\n                            case \"compile\": return [3 /*break*/, 1];\n                            case \"refresh\": return [3 /*break*/, 2];\n                            case \"urlback\": return [3 /*break*/, 4];\n                            case \"urlforward\": return [3 /*break*/, 4];\n                            case \"shell/restart\": return [3 /*break*/, 5];\n                            case \"shell/openPreview\": return [3 /*break*/, 6];\n                        }\n                        return [3 /*break*/, 7];\n                    case 1:\n                        this.compile(message.modules);\n                        return [3 /*break*/, 8];\n                    case 2: return [4 /*yield*/, this.setLocationURLIntoIFrame()];\n                    case 3:\n                        _d.sent();\n                        return [3 /*break*/, 8];\n                    case 4:\n                        (_b = (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage(message, \"*\");\n                        return [3 /*break*/, 8];\n                    case 5:\n                        this.restartShellProcess();\n                        return [3 /*break*/, 8];\n                    case 6:\n                        window.open(this.iframePreviewUrl, \"_blank\");\n                        return [3 /*break*/, 8];\n                    case 7:\n                        this.emitter.dispatch(message);\n                        _d.label = 8;\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SandpackNode.prototype.listen = function (listener) {\n        return this.emitter.listener(listener);\n    };\n    SandpackNode.prototype.destroy = function () {\n        this.emulatorIframe.remove();\n        this.emitter.cleanup();\n    };\n    return SandpackNode;\n}(_base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__.S));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs\n"));

/***/ }),

/***/ "./node_modules/@codesandbox/sandpack-client/dist/consoleHook-cdbe54ab.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/consoleHook-cdbe54ab.mjs ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E: function() { return /* binding */ EventEmitter; },\n/* harmony export */   a: function() { return /* binding */ getMessageFromError; },\n/* harmony export */   b: function() { return /* binding */ findStartScriptPackageJson; },\n/* harmony export */   c: function() { return /* binding */ consoleHook; },\n/* harmony export */   f: function() { return /* binding */ fromBundlerFilesToFS; },\n/* harmony export */   g: function() { return /* binding */ generateRandomId; },\n/* harmony export */   r: function() { return /* binding */ readBuffer; },\n/* harmony export */   w: function() { return /* binding */ writeBuffer; }\n/* harmony export */ });\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! outvariant */ \"./node_modules/@codesandbox/sandpack-client/node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types-0877c553.mjs */ \"./node_modules/@codesandbox/sandpack-client/dist/types-0877c553.mjs\");\n\n\n\nvar EventEmitter = /** @class */ (function () {\n    function EventEmitter() {\n        this.listeners = {};\n        this.listenersCount = 0;\n        this.channelId = Math.floor(Math.random() * 1000000);\n        this.listeners = [];\n    }\n    EventEmitter.prototype.cleanup = function () {\n        this.listeners = {};\n        this.listenersCount = 0;\n    };\n    EventEmitter.prototype.dispatch = function (message) {\n        Object.values(this.listeners).forEach(function (listener) { return listener(message); });\n    };\n    EventEmitter.prototype.listener = function (listener) {\n        var _this = this;\n        if (typeof listener !== \"function\") {\n            return function () {\n                return;\n            };\n        }\n        var listenerId = this.listenersCount;\n        this.listeners[listenerId] = listener;\n        this.listenersCount++;\n        return function () {\n            delete _this.listeners[listenerId];\n        };\n    };\n    return EventEmitter;\n}());\n\nfunction isCommand(char) {\n    return /[a-zA-Z.]/.test(char);\n}\nfunction isAlpha(char) {\n    return /[a-zA-Z]/.test(char);\n}\nfunction isWhitespace(char) {\n    return /\\s/.test(char);\n}\nfunction isOperator(char) {\n    return /[&|]/.test(char);\n}\nfunction isArgument(char) {\n    return /-/.test(char);\n}\nfunction isString(char) {\n    return /[\"']/.test(char);\n}\nfunction isEnvVar(char) {\n    return isAlpha(char) && char === char.toUpperCase();\n}\nvar TokenType;\n(function (TokenType) {\n    TokenType[\"OR\"] = \"OR\";\n    TokenType[\"AND\"] = \"AND\";\n    TokenType[\"PIPE\"] = \"PIPE\";\n    TokenType[\"Command\"] = \"Command\";\n    TokenType[\"Argument\"] = \"Argument\";\n    TokenType[\"String\"] = \"String\";\n    TokenType[\"EnvVar\"] = \"EnvVar\";\n})(TokenType || (TokenType = {}));\nvar operators = new Map([\n    [\"&&\", { type: TokenType.AND }],\n    [\"||\", { type: TokenType.OR }],\n    [\"|\", { type: TokenType.PIPE }],\n    [\"-\", { type: TokenType.Argument }],\n]);\nfunction tokenize(input) {\n    var current = 0;\n    var tokens = [];\n    function parseCommand() {\n        var value = \"\";\n        while (isCommand(input[current]) && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return { type: TokenType.Command, value: value };\n    }\n    function parseOperator() {\n        var value = \"\";\n        while (isOperator(input[current]) && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return operators.get(value);\n    }\n    function parseArgument() {\n        var value = \"\";\n        while ((isArgument(input[current]) || isAlpha(input[current])) &&\n            current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return { type: TokenType.Argument, value: value };\n    }\n    function parseString() {\n        var openCloseQuote = input[current];\n        var value = input[current];\n        current++;\n        while (input[current] !== openCloseQuote && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        value += input[current];\n        current++;\n        return { type: TokenType.String, value: value };\n    }\n    function parseEnvVars() {\n        var value = {};\n        var parseSingleEnv = function () {\n            var key = \"\";\n            var pair = \"\";\n            while (input[current] !== \"=\" && current < input.length) {\n                key += input[current];\n                current++;\n            }\n            // Skip equal\n            if (input[current] === \"=\") {\n                current++;\n            }\n            while (input[current] !== \" \" && current < input.length) {\n                pair += input[current];\n                current++;\n            }\n            value[key] = pair;\n        };\n        while (isEnvVar(input[current]) && current < input.length) {\n            parseSingleEnv();\n            current++;\n        }\n        return { type: TokenType.EnvVar, value: value };\n    }\n    while (current < input.length) {\n        var currentChar = input[current];\n        if (isWhitespace(currentChar)) {\n            current++;\n            continue;\n        }\n        switch (true) {\n            case isEnvVar(currentChar):\n                tokens.push(parseEnvVars());\n                break;\n            case isCommand(currentChar):\n                tokens.push(parseCommand());\n                break;\n            case isOperator(currentChar):\n                tokens.push(parseOperator());\n                break;\n            case isArgument(currentChar):\n                tokens.push(parseArgument());\n                break;\n            case isString(currentChar):\n                tokens.push(parseString());\n                break;\n            default:\n                throw new Error(\"Unknown character: \".concat(currentChar));\n        }\n    }\n    return tokens;\n}\n\nvar counter = 0;\nfunction generateRandomId() {\n    var now = Date.now();\n    var randomNumber = Math.round(Math.random() * 10000);\n    var count = (counter += 1);\n    return (+\"\".concat(now).concat(randomNumber).concat(count)).toString(16);\n}\nvar writeBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return new TextEncoder().encode(content);\n    }\n    else {\n        return content;\n    }\n};\nvar readBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    else {\n        return new TextDecoder().decode(content);\n    }\n};\nvar fromBundlerFilesToFS = function (files) {\n    return Object.entries(files).reduce(function (acc, _a) {\n        var key = _a[0], value = _a[1];\n        acc[key] = writeBuffer(value.code);\n        return acc;\n    }, {});\n};\n/**\n * Figure out which script it must run to start a server\n */\nvar findStartScriptPackageJson = function (packageJson) {\n    var scripts = {};\n    // TODO: support postinstall\n    var possibleKeys = [\"dev\", \"start\"];\n    try {\n        scripts = JSON.parse(packageJson).scripts;\n    }\n    catch (e) {\n        throw (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"Could not parse package.json file: \" + e.message);\n    }\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(scripts, \"Failed to start. Please provide a `start` or `dev` script on the package.json\");\n    var _loop_1 = function (index) {\n        if (possibleKeys[index] in scripts) {\n            var script = possibleKeys[index];\n            var candidate = scripts[script];\n            var env_1 = {};\n            var command_1 = \"\";\n            var args_1 = [];\n            tokenize(candidate).forEach(function (item) {\n                var commandNotFoundYet = command_1 === \"\";\n                if (item.type === TokenType.EnvVar) {\n                    env_1 = item.value;\n                }\n                if (item.type === TokenType.Command && commandNotFoundYet) {\n                    command_1 = item.value;\n                }\n                if (item.type === TokenType.Argument ||\n                    (!commandNotFoundYet && item.type === TokenType.Command)) {\n                    args_1.push(item.value);\n                }\n                // TODO: support TokenType.AND, TokenType.OR, TokenType.PIPE\n            });\n            return { value: [command_1, args_1, { env: env_1 }] };\n        }\n    };\n    for (var index = 0; index < possibleKeys.length; index++) {\n        var state_1 = _loop_1(index);\n        if (typeof state_1 === \"object\")\n            return state_1.value;\n    }\n    throw (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"Failed to start. Please provide a `start` or `dev` script on the package.json\");\n};\nvar getMessageFromError = function (error) {\n    if (typeof error === \"string\")\n        return error;\n    if (typeof error === \"object\" && \"message\" in error) {\n        return error.message;\n    }\n    return (0,_types_0877c553_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"The server could not be reached. Make sure that the node script is running and that a port has been started.\");\n};\n\nvar consoleHook = \"var t=\\\"undefined\\\"!=typeof globalThis?globalThis:\\\"undefined\\\"!=typeof window?window:\\\"undefined\\\"!=typeof globalThis?globalThis:\\\"undefined\\\"!=typeof self?self:{};function r(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,\\\"default\\\")?t.default:t}var e={},n={};!function(t){t.__esModule=!0,t.default=[\\\"log\\\",\\\"debug\\\",\\\"info\\\",\\\"warn\\\",\\\"error\\\",\\\"table\\\",\\\"clear\\\",\\\"time\\\",\\\"timeEnd\\\",\\\"count\\\",\\\"assert\\\",\\\"command\\\",\\\"result\\\"]}(n);var a,o={},i={};(a=i).__esModule=!0,a.default=function(){var t=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)};return t()+t()+\\\"-\\\"+t()+\\\"-\\\"+t()+\\\"-\\\"+t()+\\\"-\\\"+t()+\\\"-\\\"+Date.now()};var u={},s={__esModule:!0};s.update=s.state=void 0,s.update=function(t){s.state=t};var f={},c={};!function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)};r.__esModule=!0,r.initialState=void 0,r.initialState={timings:{},count:{}};var n=function(){return\\\"undefined\\\"!=typeof performance&&performance.now?performance.now():Date.now()};r.default=function(t,a){var o,i,u;switch(void 0===t&&(t=r.initialState),a.type){case\\\"COUNT\\\":var s=t.count[a.name]||0;return e(e({},t),{count:e(e({},t.count),(o={},o[a.name]=s+1,o))});case\\\"TIME_START\\\":return e(e({},t),{timings:e(e({},t.timings),(i={},i[a.name]={start:n()},i))});case\\\"TIME_END\\\":var f=t.timings[a.name],c=n(),l=c-f.start;return e(e({},t),{timings:e(e({},t.timings),(u={},u[a.name]=e(e({},f),{end:c,time:l}),u))});default:return t}}}(c),function(r){var e=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var n=e(c),a=s;r.default=function(t){a.update(n.default(a.state,t))}}(f);var l={__esModule:!0};l.timeEnd=l.timeStart=l.count=void 0,l.count=function(t){return{type:\\\"COUNT\\\",name:t}},l.timeStart=function(t){return{type:\\\"TIME_START\\\",name:t}},l.timeEnd=function(t){return{type:\\\"TIME_END\\\",name:t}};var d=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};u.__esModule=!0,u.stop=u.start=void 0;var p=s,h=d(f),m=l;u.start=function(t){h.default(m.timeStart(t))},u.stop=function(t){var r=null===p.state||void 0===p.state?void 0:p.state.timings[t];return r&&!r.end?(h.default(m.timeEnd(t)),{method:\\\"log\\\",data:[t+\\\": \\\"+p.state.timings[t].time+\\\"ms\\\"]}):{method:\\\"warn\\\",data:[\\\"Timer '\\\"+t+\\\"' does not exist\\\"]}};var y={},v=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};y.__esModule=!0,y.increment=void 0;var _=s,b=v(f),g=l;y.increment=function(t){return b.default(g.count(t)),{method:\\\"log\\\",data:[t+\\\": \\\"+_.state.count[t]]}};var M={},T=t&&t.__spreadArrays||function(){for(var t=0,r=0,e=arguments.length;r<e;r++)t+=arguments[r].length;var n=Array(t),a=0;for(r=0;r<e;r++)for(var o=arguments[r],i=0,u=o.length;i<u;i++,a++)n[a]=o[i];return n};M.__esModule=!0,M.test=void 0,M.test=function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];return!t&&(0===r.length&&r.push(\\\"console.assert\\\"),{method:\\\"error\\\",data:T([\\\"Assertion failed:\\\"],r)})},function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)},n=t&&t.__createBinding||(Object.create?function(t,r,e,n){void 0===n&&(n=e),Object.defineProperty(t,n,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,n){void 0===n&&(n=e),t[n]=r[e]}),a=t&&t.__setModuleDefault||(Object.create?function(t,r){Object.defineProperty(t,\\\"default\\\",{enumerable:!0,value:r})}:function(t,r){t.default=r}),o=t&&t.__importStar||function(t){if(t&&t.__esModule)return t;var r={};if(null!=t)for(var e in t)\\\"default\\\"!==e&&Object.prototype.hasOwnProperty.call(t,e)&&n(r,t,e);return a(r,t),r},s=t&&t.__spreadArrays||function(){for(var t=0,r=0,e=arguments.length;r<e;r++)t+=arguments[r].length;var n=Array(t),a=0;for(r=0;r<e;r++)for(var o=arguments[r],i=0,u=o.length;i<u;i++,a++)n[a]=o[i];return n},f=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var c=f(i),l=o(u),d=o(y),p=o(M);r.default=function(t,r,n){var a=n||c.default();switch(t){case\\\"clear\\\":return{method:t,id:a};case\\\"count\\\":return!!(o=\\\"string\\\"==typeof r[0]?r[0]:\\\"default\\\")&&e(e({},d.increment(o)),{id:a});case\\\"time\\\":case\\\"timeEnd\\\":var o;return!!(o=\\\"string\\\"==typeof r[0]?r[0]:\\\"default\\\")&&(\\\"time\\\"===t?(l.start(o),!1):e(e({},l.stop(o)),{id:a}));case\\\"assert\\\":if(0!==r.length){var i=p.test.apply(p,s([r[0]],r.slice(1)));if(i)return e(e({},i),{id:a})}return!1;case\\\"error\\\":return{method:t,id:a,data:r.map((function(t){try{return t.stack||t}catch(r){return t}}))};default:return{method:t,id:a,data:r}}}}(o);var S={},O={};!function(t){var r;t.__esModule=!0,function(t){t[t.infinity=0]=\\\"infinity\\\",t[t.minusInfinity=1]=\\\"minusInfinity\\\",t[t.minusZero=2]=\\\"minusZero\\\"}(r||(r={})),t.default={type:\\\"Arithmetic\\\",lookup:Number,shouldTransform:function(t,r){return\\\"number\\\"===t&&(r===1/0||r===-1/0||function(t){return 1/t==-1/0}(r))},toSerializable:function(t){return t===1/0?r.infinity:t===-1/0?r.minusInfinity:r.minusZero},fromSerializable:function(t){return t===r.infinity?1/0:t===r.minusInfinity?-1/0:t===r.minusZero?-0:t}}}(O);var w={};!function(t){t.__esModule=!0,t.default={type:\\\"Function\\\",lookup:Function,shouldTransform:function(t,r){return\\\"function\\\"==typeof r},toSerializable:function(t){var r=\\\"\\\";try{r=t.toString().substring(r.indexOf(\\\"{\\\")+1,r.lastIndexOf(\\\"}\\\"))}catch(t){}return{name:t.name,body:r,proto:Object.getPrototypeOf(t).constructor.name}},fromSerializable:function(t){try{var r=function(){};return\\\"string\\\"==typeof t.name&&Object.defineProperty(r,\\\"name\\\",{value:t.name,writable:!1}),\\\"string\\\"==typeof t.body&&Object.defineProperty(r,\\\"body\\\",{value:t.body,writable:!1}),\\\"string\\\"==typeof t.proto&&(r.constructor={name:t.proto}),r}catch(r){return t}}}}(w);var A={};!function(t){var r;function e(t){for(var r={},e=0,n=t.attributes;e<n.length;e++){var a=n[e];r[a.name]=a.value}return r}t.__esModule=!0,t.default={type:\\\"HTMLElement\\\",shouldTransform:function(t,r){return r&&r.children&&\\\"string\\\"==typeof r.innerHTML&&\\\"string\\\"==typeof r.tagName},toSerializable:function(t){return{tagName:t.tagName.toLowerCase(),attributes:e(t),innerHTML:t.innerHTML}},fromSerializable:function(t){try{var e=(r||(r=document.implementation.createHTMLDocument(\\\"sandbox\\\"))).createElement(t.tagName);e.innerHTML=t.innerHTML;for(var n=0,a=Object.keys(t.attributes);n<a.length;n++){var o=a[n];try{e.setAttribute(o,t.attributes[o])}catch(t){}}return e}catch(r){return t}}}}(A);var j={};!function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)};r.__esModule=!0,r.default={type:\\\"Map\\\",shouldTransform:function(t,r){return r&&r.constructor&&\\\"Map\\\"===r.constructor.name},toSerializable:function(t){var r={};return t.forEach((function(t,e){var n=\\\"object\\\"==typeof e?JSON.stringify(e):e;r[n]=t})),{name:\\\"Map\\\",body:r,proto:Object.getPrototypeOf(t).constructor.name}},fromSerializable:function(t){var r=t.body,n=e({},r);return\\\"string\\\"==typeof t.proto&&(n.constructor={name:t.proto}),n}}}(j);var z={};!function(t){t.__esModule=!0;var r=\\\"@t\\\",e=/^#*@(t|r)$/,n=(0,eval)(\\\"this\\\"),a=\\\"function\\\"==typeof ArrayBuffer,o=\\\"function\\\"==typeof Map,i=\\\"function\\\"==typeof Set,u=[\\\"Int8Array\\\",\\\"Uint8Array\\\",\\\"Uint8ClampedArray\\\",\\\"Int16Array\\\",\\\"Uint16Array\\\",\\\"Int32Array\\\",\\\"Uint32Array\\\",\\\"Float32Array\\\",\\\"Float64Array\\\"],s=Array.prototype.slice,f={serialize:function(t){return JSON.stringify(t)},deserialize:function(t){return JSON.parse(t)}},c=function(){function t(t,r){this.references=t,this.transforms=r,this.transformsMap=this._makeTransformsMap(),this.circularCandidates=[],this.circularCandidatesDescrs=[],this.circularRefCount=0}return t._createRefMark=function(t){var r=Object.create(null);return r[\\\"@r\\\"]=t,r},t.prototype._createCircularCandidate=function(t,r,e){this.circularCandidates.push(t),this.circularCandidatesDescrs.push({parent:r,key:e,refIdx:-1})},t.prototype._applyTransform=function(t,e,n,a){var o=Object.create(null),i=a.toSerializable(t);return\\\"object\\\"==typeof i&&this._createCircularCandidate(t,e,n),o[r]=a.type,o.data=this._handleValue((function(){return i}),e,n),o},t.prototype._handleArray=function(t){for(var r=[],e=function(e){r[e]=n._handleValue((function(){return t[e]}),r,e)},n=this,a=0;a<t.length;a++)e(a);return r},t.prototype._handlePlainObject=function(t){var r,n,a=Object.create(null),o=function(r){if(Reflect.has(t,r)){var n=e.test(r)?\\\"#\\\"+r:r;a[n]=i._handleValue((function(){return t[r]}),a,n)}},i=this;for(var u in t)o(u);var s=null===(n=null===(r=null==t?void 0:t.__proto__)||void 0===r?void 0:r.constructor)||void 0===n?void 0:n.name;return s&&\\\"Object\\\"!==s&&(a.constructor={name:s}),a},t.prototype._handleObject=function(t,r,e){return this._createCircularCandidate(t,r,e),Array.isArray(t)?this._handleArray(t):this._handlePlainObject(t)},t.prototype._ensureCircularReference=function(r){var e=this.circularCandidates.indexOf(r);if(e>-1){var n=this.circularCandidatesDescrs[e];return-1===n.refIdx&&(n.refIdx=n.parent?++this.circularRefCount:0),t._createRefMark(n.refIdx)}return null},t.prototype._handleValue=function(t,r,e){try{var n=t(),a=typeof n,o=\\\"object\\\"===a&&null!==n;if(o){var i=this._ensureCircularReference(n);if(i)return i}var u=this._findTransform(a,n);return u?this._applyTransform(n,r,e,u):o?this._handleObject(n,r,e):n}catch(t){try{return this._handleValue((function(){return t instanceof Error?t:new Error(t)}),r,e)}catch(t){return null}}},t.prototype._makeTransformsMap=function(){if(o){var t=new Map;return this.transforms.forEach((function(r){r.lookup&&t.set(r.lookup,r)})),t}},t.prototype._findTransform=function(t,r){if(o&&r&&r.constructor&&(null==(a=this.transformsMap.get(r.constructor))?void 0:a.shouldTransform(t,r)))return a;for(var e=0,n=this.transforms;e<n.length;e++){var a;if((a=n[e]).shouldTransform(t,r))return a}},t.prototype.transform=function(){for(var r=this,e=[this._handleValue((function(){return r.references}),null,null)],n=0,a=this.circularCandidatesDescrs;n<a.length;n++){var o=a[n];o.refIdx>0&&(e[o.refIdx]=o.parent[o.key],o.parent[o.key]=t._createRefMark(o.refIdx))}return e},t}(),l=function(){function t(t,r){this.activeTransformsStack=[],this.visitedRefs=Object.create(null),this.references=t,this.transformMap=r}return t.prototype._handlePlainObject=function(t){var r=Object.create(null);for(var n in\\\"constructor\\\"in t&&(t.constructor&&\\\"string\\\"==typeof t.constructor.name||(t.constructor={name:\\\"Object\\\"})),t)t.hasOwnProperty(n)&&(this._handleValue(t[n],t,n),e.test(n)&&(r[n.substring(1)]=t[n],delete t[n]));for(var a in r)t[a]=r[a]},t.prototype._handleTransformedObject=function(t,e,n){var a=t[r],o=this.transformMap[a];if(!o)throw new Error(\\\"Can't find transform for \\\\\\\"\\\"+a+'\\\" type.');this.activeTransformsStack.push(t),this._handleValue(t.data,t,\\\"data\\\"),this.activeTransformsStack.pop(),e[n]=o.fromSerializable(t.data)},t.prototype._handleCircularSelfRefDuringTransform=function(t,r,e){var n=this.references;Object.defineProperty(r,e,{val:void 0,configurable:!0,enumerable:!0,get:function(){return void 0===this.val&&(this.val=n[t]),this.val},set:function(t){this.val=t}})},t.prototype._handleCircularRef=function(t,r,e){this.activeTransformsStack.includes(this.references[t])?this._handleCircularSelfRefDuringTransform(t,r,e):(this.visitedRefs[t]||(this.visitedRefs[t]=!0,this._handleValue(this.references[t],this.references,t)),r[e]=this.references[t])},t.prototype._handleValue=function(t,e,n){if(\\\"object\\\"==typeof t&&null!==t){var a=t[\\\"@r\\\"];if(void 0!==a)this._handleCircularRef(a,e,n);else if(t[r])this._handleTransformedObject(t,e,n);else if(Array.isArray(t))for(var o=0;o<t.length;o++)this._handleValue(t[o],t,o);else this._handlePlainObject(t)}},t.prototype.transform=function(){return this.visitedRefs[0]=!0,this._handleValue(this.references[0],this.references,0),this.references[0]},t}(),d=[{type:\\\"[[NaN]]\\\",shouldTransform:function(t,r){return\\\"number\\\"===t&&isNaN(r)},toSerializable:function(){return\\\"\\\"},fromSerializable:function(){return NaN}},{type:\\\"[[undefined]]\\\",shouldTransform:function(t){return\\\"undefined\\\"===t},toSerializable:function(){return\\\"\\\"},fromSerializable:function(){}},{type:\\\"[[Date]]\\\",lookup:Date,shouldTransform:function(t,r){return r instanceof Date},toSerializable:function(t){return t.getTime()},fromSerializable:function(t){var r=new Date;return r.setTime(t),r}},{type:\\\"[[RegExp]]\\\",lookup:RegExp,shouldTransform:function(t,r){return r instanceof RegExp},toSerializable:function(t){var r={src:t.source,flags:\\\"\\\"};return t.globalThis&&(r.flags+=\\\"g\\\"),t.ignoreCase&&(r.flags+=\\\"i\\\"),t.multiline&&(r.flags+=\\\"m\\\"),r},fromSerializable:function(t){return new RegExp(t.src,t.flags)}},{type:\\\"[[Error]]\\\",lookup:Error,shouldTransform:function(t,r){return r instanceof Error},toSerializable:function(t){var r,e;return t.stack||null===(e=(r=Error).captureStackTrace)||void 0===e||e.call(r,t),{name:t.name,message:t.message,stack:t.stack}},fromSerializable:function(t){var r=new(n[t.name]||Error)(t.message);return r.stack=t.stack,r}},{type:\\\"[[ArrayBuffer]]\\\",lookup:a&&ArrayBuffer,shouldTransform:function(t,r){return a&&r instanceof ArrayBuffer},toSerializable:function(t){var r=new Int8Array(t);return s.call(r)},fromSerializable:function(t){if(a){var r=new ArrayBuffer(t.length);return new Int8Array(r).set(t),r}return t}},{type:\\\"[[TypedArray]]\\\",shouldTransform:function(t,r){if(a)return ArrayBuffer.isView(r)&&!(r instanceof DataView);for(var e=0,o=u;e<o.length;e++){var i=o[e];if(\\\"function\\\"==typeof n[i]&&r instanceof n[i])return!0}return!1},toSerializable:function(t){return{ctorName:t.constructor.name,arr:s.call(t)}},fromSerializable:function(t){return\\\"function\\\"==typeof n[t.ctorName]?new n[t.ctorName](t.arr):t.arr}},{type:\\\"[[Map]]\\\",lookup:o&&Map,shouldTransform:function(t,r){return o&&r instanceof Map},toSerializable:function(t){var r=[];return t.forEach((function(t,e){r.push(e),r.push(t)})),r},fromSerializable:function(t){if(o){for(var r=new Map,e=0;e<t.length;e+=2)r.set(t[e],t[e+1]);return r}for(var n=[],a=0;a<t.length;a+=2)n.push([t[e],t[e+1]]);return n}},{type:\\\"[[Set]]\\\",lookup:i&&Set,shouldTransform:function(t,r){return i&&r instanceof Set},toSerializable:function(t){var r=[];return t.forEach((function(t){r.push(t)})),r},fromSerializable:function(t){if(i){for(var r=new Set,e=0;e<t.length;e++)r.add(t[e]);return r}return t}}],p=function(){function t(t){this.transforms=[],this.transformsMap=Object.create(null),this.serializer=t||f,this.addTransforms(d)}return t.prototype.addTransforms=function(t){for(var r=0,e=t=Array.isArray(t)?t:[t];r<e.length;r++){var n=e[r];if(this.transformsMap[n.type])throw new Error('Transform with type \\\"'+n.type+'\\\" was already added.');this.transforms.push(n),this.transformsMap[n.type]=n}return this},t.prototype.removeTransforms=function(t){for(var r=0,e=t=Array.isArray(t)?t:[t];r<e.length;r++){var n=e[r],a=this.transforms.indexOf(n);a>-1&&this.transforms.splice(a,1),delete this.transformsMap[n.type]}return this},t.prototype.encode=function(t){var r=new c(t,this.transforms).transform();return this.serializer.serialize(r)},t.prototype.decode=function(t){var r=this.serializer.deserialize(t);return new l(r,this.transformsMap).transform()},t}();t.default=p}(z);var E=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};S.__esModule=!0,S.Decode=P=S.Encode=void 0;var k=E(O),C=E(w),D=E(A),I=E(j),N=E(z),R=[D.default,C.default,k.default,I.default],x=new N.default;x.addTransforms(R);var P=S.Encode=function(t){return JSON.parse(x.encode(t))};S.Decode=function(t){return x.decode(JSON.stringify(t))},function(r){var e=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var a=e(n),i=e(o),u=S;r.default=function(t,r,e){void 0===e&&(e=!0);for(var n=t,o={pointers:{},src:{npm:\\\"https://npmjs.com/package/console-feed\\\",github:\\\"https://github.com/samdenty99/console-feed\\\"}},s=function(t){var a=n[t];n[t]=function(){a.apply(this,arguments);var n=[].slice.call(arguments);setTimeout((function(){var a=i.default(t,n);if(a){var o=a;e&&(o=u.Encode(a)),r(o,a)}}))},o.pointers[t]=a},f=0,c=a.default;f<c.length;f++)s(c[f]);return n.feed=o,n}}(e),r(e)(window.console,(function(t){var r=P(t);parent.postMessage({type:\\\"console\\\",codesandbox:!0,log:Array.isArray(r)?r[0]:r,channelId:scope.channelId},\\\"*\\\")}));\\n\";\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudC9kaXN0L2NvbnNvbGVIb29rLWNkYmU1NGFiLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXVDO0FBQ2lCOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0UsMkJBQTJCO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhCQUE4QjtBQUMvQjtBQUNBLGFBQWEscUJBQXFCO0FBQ2xDLGFBQWEsb0JBQW9CO0FBQ2pDLFlBQVksc0JBQXNCO0FBQ2xDLFlBQVksMEJBQTBCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHNEQUFXO0FBQ3pCO0FBQ0EsSUFBSSxxREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IscUJBQXFCLDZCQUE2QixZQUFZO0FBQzlEO0FBQ0E7QUFDQSx3QkFBd0IsNkJBQTZCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxzREFBVztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0RBQVc7QUFDdEI7O0FBRUEsd0xBQXdMLGNBQWMsd0ZBQXdGLFFBQVEsTUFBTSxhQUFhLCtKQUErSixJQUFJLFVBQVUsTUFBTSx5Q0FBeUMsaUJBQWlCLDZEQUE2RCx5RUFBeUUsUUFBUSxJQUFJLGVBQWUsNkNBQTZDLFdBQVcsUUFBUSxNQUFNLGFBQWEsZ0NBQWdDLG9DQUFvQyxpQ0FBaUMsSUFBSSx1RkFBdUYsU0FBUywwQkFBMEIsc0RBQXNELFVBQVUsV0FBVyxpQkFBaUIsdUZBQXVGLHdCQUF3QixVQUFVLDhDQUE4Qyx1Q0FBdUMsYUFBYSxLQUFLLFlBQVksZUFBZSxtQkFBbUIsRUFBRSxnQ0FBZ0MsS0FBSyxjQUFjLGlCQUFpQixZQUFZLFVBQVUsS0FBSyxFQUFFLDJEQUEyRCxhQUFhLEtBQUssY0FBYyxpQkFBaUIsaUJBQWlCLEtBQUssYUFBYSxNQUFNLEVBQUUsbUJBQW1CLGdCQUFnQix3Q0FBd0MsMEJBQTBCLFlBQVksZ0JBQWdCLGVBQWUsc0JBQXNCLGdDQUFnQyxJQUFJLE9BQU8sZUFBZSx5REFBeUQsT0FBTyx1QkFBdUIseUJBQXlCLE9BQU8sNEJBQTRCLHVCQUF1QixPQUFPLDJCQUEyQix3Q0FBd0MsMEJBQTBCLFlBQVksc0NBQXNDLG1CQUFtQixvQkFBb0IsMEJBQTBCLG9CQUFvQixpRUFBaUUsMkNBQTJDLDhEQUE4RCxHQUFHLDREQUE0RCxRQUFRLHFDQUFxQywwQkFBMEIsWUFBWSxtQ0FBbUMsbUJBQW1CLHdCQUF3Qiw4QkFBOEIsa0RBQWtELFFBQVEsbUNBQW1DLG1DQUFtQyxJQUFJLDJCQUEyQixtQkFBbUIsUUFBUSxJQUFJLDBDQUEwQyxJQUFJLGtCQUFrQixVQUFVLGlEQUFpRCxpQkFBaUIsbUJBQW1CLHdCQUF3QixxREFBcUQsbURBQW1ELEVBQUUsYUFBYSxnQ0FBZ0Msb0NBQW9DLGlDQUFpQyxJQUFJLHVGQUF1RixTQUFTLHlCQUF5QiwwREFBMEQsNkNBQTZDLDZCQUE2QixhQUFhLEVBQUUsbUJBQW1CLDRCQUE0QiwwREFBMEQscUNBQXFDLHNCQUFzQixFQUFFLGVBQWUsWUFBWSxtQ0FBbUMsNEJBQTRCLFNBQVMsK0ZBQStGLGdCQUFnQixtQ0FBbUMsbUNBQW1DLElBQUksMkJBQTJCLG1CQUFtQixRQUFRLElBQUksMENBQTBDLElBQUksa0JBQWtCLFNBQVMscUNBQXFDLDBCQUEwQixZQUFZLGdCQUFnQixnQ0FBZ0MsMEJBQTBCLHFCQUFxQixVQUFVLHFCQUFxQixlQUFlLDBFQUEwRSxrQkFBa0IsS0FBSyxFQUFFLG1DQUFtQywwRkFBMEYsYUFBYSxLQUFLLEdBQUcsZ0NBQWdDLDJDQUEyQyxrQkFBa0IsS0FBSyxLQUFLLEVBQUUsU0FBUyxxQkFBcUIsc0NBQXNDLElBQUksa0JBQWtCLFNBQVMsVUFBVSxJQUFJLGVBQWUsd0JBQXdCLElBQUksUUFBUSxNQUFNLGFBQWEsTUFBTSw0QkFBNEIsbUdBQW1HLFNBQVMsY0FBYyxnRUFBZ0Usc0RBQXNELGlCQUFpQixLQUFLLDRCQUE0QiwrREFBK0QsOEJBQThCLDBFQUEwRSxJQUFJLFNBQVMsYUFBYSwyQkFBMkIsZ0VBQWdFLDZCQUE2Qiw0QkFBNEIsV0FBVyxJQUFJLHNDQUFzQyx1QkFBdUIsS0FBSyxVQUFVLE9BQU8sb0VBQW9FLDhCQUE4QixJQUFJLG1CQUFtQixtRUFBbUUseUJBQXlCLCtEQUErRCx5QkFBeUIsOENBQThDLGFBQWEsSUFBSSxTQUFTLFlBQVksSUFBSSxTQUFTLGFBQWEsTUFBTSxjQUFjLFlBQVksb0JBQW9CLFdBQVcsS0FBSyxXQUFXLGtCQUFrQixTQUFTLDJCQUEyQixtREFBbUQsbUZBQW1GLDRCQUE0QixPQUFPLHVFQUF1RSw4QkFBOEIsSUFBSSxnR0FBZ0csd0JBQXdCLHdDQUF3QyxXQUFXLEtBQUssV0FBVyxJQUFJLGtDQUFrQyxXQUFXLFNBQVMsU0FBUyxZQUFZLElBQUksU0FBUyxhQUFhLGdDQUFnQyxvQ0FBb0MsaUNBQWlDLElBQUksdUZBQXVGLFNBQVMsMEJBQTBCLDJCQUEyQiwyQ0FBMkMsc0RBQXNELDRCQUE0QixTQUFTLGdDQUFnQywrQ0FBK0MsT0FBTyxJQUFJLHFFQUFxRSw4QkFBOEIsbUJBQW1CLElBQUksa0RBQWtELGFBQWEsTUFBTSxJQUFJLFNBQVMsYUFBYSxnQkFBZ0IsNFRBQTRULHNCQUFzQix5QkFBeUIseUJBQXlCLHNCQUFzQixjQUFjLGdCQUFnQixxS0FBcUssb0NBQW9DLDBCQUEwQixxQkFBcUIsc0RBQXNELG9FQUFvRSx5QkFBeUIsRUFBRSwrQ0FBK0MsZ0RBQWdELGtIQUFrSCxTQUFTLFNBQVMsc0NBQXNDLDJCQUEyQixnQ0FBZ0MsWUFBWSxPQUFPLFlBQVksV0FBVyxTQUFTLFNBQVMsNENBQTRDLDRDQUE0QyxxQkFBcUIsMEJBQTBCLGdDQUFnQyxZQUFZLFFBQVEsUUFBUSxvQkFBb0Isa0hBQWtILDBDQUEwQyxPQUFPLElBQUksMkNBQTJDLDZHQUE2RyxrREFBa0QseUNBQXlDLFNBQVMsdUNBQXVDLDhGQUE4RixZQUFZLDBDQUEwQyxJQUFJLGdEQUFnRCxNQUFNLHVDQUF1QyxjQUFjLCtCQUErQixxRUFBcUUsU0FBUyxJQUFJLHFDQUFxQyx5Q0FBeUMsT0FBTyxTQUFTLGNBQWMsMkNBQTJDLE1BQU0sY0FBYyw0Q0FBNEMsNEJBQTRCLE1BQU0sMENBQTBDLGlIQUFpSCw4QkFBOEIsV0FBVyxLQUFLLE1BQU0sMkNBQTJDLGtDQUFrQyxnREFBZ0Qsb0JBQW9CLGtEQUFrRCxXQUFXLEtBQUssV0FBVyxxRkFBcUYsU0FBUyxHQUFHLGdCQUFnQixnQkFBZ0IseUdBQXlHLGtEQUFrRCwwQkFBMEIsd0dBQXdHLGdCQUFnQix3R0FBd0cseUJBQXlCLHNEQUFzRCxrQ0FBa0Msc0VBQXNFLHlJQUF5SSxtRUFBbUUsc0JBQXNCLDJCQUEyQix3REFBd0QsbURBQW1ELGlCQUFpQixZQUFZLEVBQUUsZ0RBQWdELDBPQUEwTywwQ0FBMEMsbUNBQW1DLGdCQUFnQiw2Q0FBNkMsa0RBQWtELHFDQUFxQyxXQUFXLGdDQUFnQyxpQ0FBaUMsa0NBQWtDLHlHQUF5RyxHQUFHLE9BQU8sK0NBQStDLCtCQUErQiwyQkFBMkIsV0FBVyw2QkFBNkIsWUFBWSxFQUFFLG1EQUFtRCx3QkFBd0IsMkJBQTJCLFdBQVcsK0JBQStCLEVBQUUsNERBQTRELHlCQUF5Qiw0QkFBNEIsbUJBQW1CLDhCQUE4QixlQUFlLHVCQUF1QixFQUFFLGdFQUFnRSwyQkFBMkIsNEJBQTRCLE9BQU8seUJBQXlCLHFHQUFxRyw4QkFBOEIsa0NBQWtDLEVBQUUsOERBQThELDBCQUEwQiw0QkFBNEIsUUFBUSxpRkFBaUYsNkNBQTZDLDhCQUE4Qix1Q0FBdUMsMEJBQTBCLEVBQUUsNkVBQTZFLG1DQUFtQyw0QkFBNEIsdUJBQXVCLGlCQUFpQiw4QkFBOEIsTUFBTSxnQ0FBZ0MsaUNBQWlDLFVBQVUsRUFBRSxzREFBc0QsNERBQTRELGdCQUFnQixXQUFXLEtBQUssV0FBVyx5REFBeUQsU0FBUyw0QkFBNEIsT0FBTywyQ0FBMkMsOEJBQThCLHlFQUF5RSxFQUFFLDZEQUE2RCwyQkFBMkIsNEJBQTRCLFNBQVMsZ0NBQWdDLG9CQUFvQixLQUFLLDhCQUE4QixNQUFNLHNCQUFzQixXQUFXLHdCQUF3QixTQUFTLGlCQUFpQixXQUFXLDJCQUEyQixVQUFVLEVBQUUsNkRBQTZELDJCQUEyQiw0QkFBNEIsU0FBUyw4QkFBOEIsVUFBVSxLQUFLLDhCQUE4QixNQUFNLHNCQUFzQixXQUFXLGdCQUFnQixTQUFTLFVBQVUsZUFBZSxjQUFjLHFHQUFxRyw2Q0FBNkMsdUNBQXVDLFdBQVcsS0FBSyxXQUFXLHVHQUF1RyxxREFBcUQsWUFBWSwwQ0FBMEMsdUNBQXVDLFdBQVcsS0FBSyx3Q0FBd0Msb0VBQW9FLFlBQVksZ0NBQWdDLDJDQUEyQyxvQ0FBb0MsZ0NBQWdDLHFDQUFxQywrQ0FBK0MsR0FBRyxHQUFHLFlBQVksSUFBSSx3Q0FBd0MsMEJBQTBCLFlBQVksMkNBQTJDLG1HQUFtRyxtQkFBbUIsMkJBQTJCLGdDQUFnQyxxQkFBcUIsbUNBQW1DLGFBQWEsd0NBQXdDLDBCQUEwQixZQUFZLGdCQUFnQixzQkFBc0IsMEJBQTBCLG1CQUFtQixlQUFlLFdBQVcsTUFBTSxzR0FBc0csZUFBZSxXQUFXLGdCQUFnQix3QkFBd0IsK0JBQStCLHVCQUF1QixxQkFBcUIsTUFBTSxRQUFRLDJCQUEyQixHQUFHLGlCQUFpQixpQkFBaUIsV0FBVyxZQUFZLG1CQUFtQixxQ0FBcUMsV0FBVyxvQkFBb0Isc0ZBQXNGLFFBQVEsR0FBRzs7QUFFcm9nQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudC9kaXN0L2NvbnNvbGVIb29rLWNkYmU1NGFiLm1qcz9jYWYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ291dHZhcmlhbnQnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVFcnJvciB9IGZyb20gJy4vdHlwZXMtMDg3N2M1NTMubWpzJztcblxudmFyIEV2ZW50RW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgICAgIHRoaXMubGlzdGVuZXJzQ291bnQgPSAwO1xuICAgICAgICB0aGlzLmNoYW5uZWxJZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApO1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgIH1cbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgICAgIHRoaXMubGlzdGVuZXJzQ291bnQgPSAwO1xuICAgIH07XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgIE9iamVjdC52YWx1ZXModGhpcy5saXN0ZW5lcnMpLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7IHJldHVybiBsaXN0ZW5lcihtZXNzYWdlKTsgfSk7XG4gICAgfTtcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBsaXN0ZW5lcklkID0gdGhpcy5saXN0ZW5lcnNDb3VudDtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbbGlzdGVuZXJJZF0gPSBsaXN0ZW5lcjtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNDb3VudCsrO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzLmxpc3RlbmVyc1tsaXN0ZW5lcklkXTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XG59KCkpO1xuXG5mdW5jdGlvbiBpc0NvbW1hbmQoY2hhcikge1xuICAgIHJldHVybiAvW2EtekEtWi5dLy50ZXN0KGNoYXIpO1xufVxuZnVuY3Rpb24gaXNBbHBoYShjaGFyKSB7XG4gICAgcmV0dXJuIC9bYS16QS1aXS8udGVzdChjaGFyKTtcbn1cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjaGFyKSB7XG4gICAgcmV0dXJuIC9cXHMvLnRlc3QoY2hhcik7XG59XG5mdW5jdGlvbiBpc09wZXJhdG9yKGNoYXIpIHtcbiAgICByZXR1cm4gL1smfF0vLnRlc3QoY2hhcik7XG59XG5mdW5jdGlvbiBpc0FyZ3VtZW50KGNoYXIpIHtcbiAgICByZXR1cm4gLy0vLnRlc3QoY2hhcik7XG59XG5mdW5jdGlvbiBpc1N0cmluZyhjaGFyKSB7XG4gICAgcmV0dXJuIC9bXCInXS8udGVzdChjaGFyKTtcbn1cbmZ1bmN0aW9uIGlzRW52VmFyKGNoYXIpIHtcbiAgICByZXR1cm4gaXNBbHBoYShjaGFyKSAmJiBjaGFyID09PSBjaGFyLnRvVXBwZXJDYXNlKCk7XG59XG52YXIgVG9rZW5UeXBlO1xuKGZ1bmN0aW9uIChUb2tlblR5cGUpIHtcbiAgICBUb2tlblR5cGVbXCJPUlwiXSA9IFwiT1JcIjtcbiAgICBUb2tlblR5cGVbXCJBTkRcIl0gPSBcIkFORFwiO1xuICAgIFRva2VuVHlwZVtcIlBJUEVcIl0gPSBcIlBJUEVcIjtcbiAgICBUb2tlblR5cGVbXCJDb21tYW5kXCJdID0gXCJDb21tYW5kXCI7XG4gICAgVG9rZW5UeXBlW1wiQXJndW1lbnRcIl0gPSBcIkFyZ3VtZW50XCI7XG4gICAgVG9rZW5UeXBlW1wiU3RyaW5nXCJdID0gXCJTdHJpbmdcIjtcbiAgICBUb2tlblR5cGVbXCJFbnZWYXJcIl0gPSBcIkVudlZhclwiO1xufSkoVG9rZW5UeXBlIHx8IChUb2tlblR5cGUgPSB7fSkpO1xudmFyIG9wZXJhdG9ycyA9IG5ldyBNYXAoW1xuICAgIFtcIiYmXCIsIHsgdHlwZTogVG9rZW5UeXBlLkFORCB9XSxcbiAgICBbXCJ8fFwiLCB7IHR5cGU6IFRva2VuVHlwZS5PUiB9XSxcbiAgICBbXCJ8XCIsIHsgdHlwZTogVG9rZW5UeXBlLlBJUEUgfV0sXG4gICAgW1wiLVwiLCB7IHR5cGU6IFRva2VuVHlwZS5Bcmd1bWVudCB9XSxcbl0pO1xuZnVuY3Rpb24gdG9rZW5pemUoaW5wdXQpIHtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIHRva2VucyA9IFtdO1xuICAgIGZ1bmN0aW9uIHBhcnNlQ29tbWFuZCgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gXCJcIjtcbiAgICAgICAgd2hpbGUgKGlzQ29tbWFuZChpbnB1dFtjdXJyZW50XSkgJiYgY3VycmVudCA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdmFsdWUgKz0gaW5wdXRbY3VycmVudF07XG4gICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdHlwZTogVG9rZW5UeXBlLkNvbW1hbmQsIHZhbHVlOiB2YWx1ZSB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJzZU9wZXJhdG9yKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBcIlwiO1xuICAgICAgICB3aGlsZSAoaXNPcGVyYXRvcihpbnB1dFtjdXJyZW50XSkgJiYgY3VycmVudCA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdmFsdWUgKz0gaW5wdXRbY3VycmVudF07XG4gICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9ycy5nZXQodmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJzZUFyZ3VtZW50KCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBcIlwiO1xuICAgICAgICB3aGlsZSAoKGlzQXJndW1lbnQoaW5wdXRbY3VycmVudF0pIHx8IGlzQWxwaGEoaW5wdXRbY3VycmVudF0pKSAmJlxuICAgICAgICAgICAgY3VycmVudCA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdmFsdWUgKz0gaW5wdXRbY3VycmVudF07XG4gICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdHlwZTogVG9rZW5UeXBlLkFyZ3VtZW50LCB2YWx1ZTogdmFsdWUgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VTdHJpbmcoKSB7XG4gICAgICAgIHZhciBvcGVuQ2xvc2VRdW90ZSA9IGlucHV0W2N1cnJlbnRdO1xuICAgICAgICB2YXIgdmFsdWUgPSBpbnB1dFtjdXJyZW50XTtcbiAgICAgICAgY3VycmVudCsrO1xuICAgICAgICB3aGlsZSAoaW5wdXRbY3VycmVudF0gIT09IG9wZW5DbG9zZVF1b3RlICYmIGN1cnJlbnQgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IGlucHV0W2N1cnJlbnRdO1xuICAgICAgICAgICAgY3VycmVudCsrO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlICs9IGlucHV0W2N1cnJlbnRdO1xuICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFRva2VuVHlwZS5TdHJpbmcsIHZhbHVlOiB2YWx1ZSB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJzZUVudlZhcnMoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHt9O1xuICAgICAgICB2YXIgcGFyc2VTaW5nbGVFbnYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gXCJcIjtcbiAgICAgICAgICAgIHZhciBwYWlyID0gXCJcIjtcbiAgICAgICAgICAgIHdoaWxlIChpbnB1dFtjdXJyZW50XSAhPT0gXCI9XCIgJiYgY3VycmVudCA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGtleSArPSBpbnB1dFtjdXJyZW50XTtcbiAgICAgICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTa2lwIGVxdWFsXG4gICAgICAgICAgICBpZiAoaW5wdXRbY3VycmVudF0gPT09IFwiPVwiKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGlucHV0W2N1cnJlbnRdICE9PSBcIiBcIiAmJiBjdXJyZW50IDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcGFpciArPSBpbnB1dFtjdXJyZW50XTtcbiAgICAgICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZVtrZXldID0gcGFpcjtcbiAgICAgICAgfTtcbiAgICAgICAgd2hpbGUgKGlzRW52VmFyKGlucHV0W2N1cnJlbnRdKSAmJiBjdXJyZW50IDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICBwYXJzZVNpbmdsZUVudigpO1xuICAgICAgICAgICAgY3VycmVudCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFRva2VuVHlwZS5FbnZWYXIsIHZhbHVlOiB2YWx1ZSB9O1xuICAgIH1cbiAgICB3aGlsZSAoY3VycmVudCA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICB2YXIgY3VycmVudENoYXIgPSBpbnB1dFtjdXJyZW50XTtcbiAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjdXJyZW50Q2hhcikpIHtcbiAgICAgICAgICAgIGN1cnJlbnQrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgY2FzZSBpc0VudlZhcihjdXJyZW50Q2hhcik6XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2gocGFyc2VFbnZWYXJzKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBpc0NvbW1hbmQoY3VycmVudENoYXIpOlxuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHBhcnNlQ29tbWFuZCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgaXNPcGVyYXRvcihjdXJyZW50Q2hhcik6XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2gocGFyc2VPcGVyYXRvcigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgaXNBcmd1bWVudChjdXJyZW50Q2hhcik6XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2gocGFyc2VBcmd1bWVudCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgaXNTdHJpbmcoY3VycmVudENoYXIpOlxuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHBhcnNlU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGNoYXJhY3RlcjogXCIuY29uY2F0KGN1cnJlbnRDaGFyKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRva2Vucztcbn1cblxudmFyIGNvdW50ZXIgPSAwO1xuZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21JZCgpIHtcbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgcmFuZG9tTnVtYmVyID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuICAgIHZhciBjb3VudCA9IChjb3VudGVyICs9IDEpO1xuICAgIHJldHVybiAoK1wiXCIuY29uY2F0KG5vdykuY29uY2F0KHJhbmRvbU51bWJlcikuY29uY2F0KGNvdW50KSkudG9TdHJpbmcoMTYpO1xufVxudmFyIHdyaXRlQnVmZmVyID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjb250ZW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbn07XG52YXIgcmVhZEJ1ZmZlciA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShjb250ZW50KTtcbiAgICB9XG59O1xudmFyIGZyb21CdW5kbGVyRmlsZXNUb0ZTID0gZnVuY3Rpb24gKGZpbGVzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGZpbGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgX2EpIHtcbiAgICAgICAgdmFyIGtleSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgICAgICBhY2Nba2V5XSA9IHdyaXRlQnVmZmVyKHZhbHVlLmNvZGUpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG4vKipcbiAqIEZpZ3VyZSBvdXQgd2hpY2ggc2NyaXB0IGl0IG11c3QgcnVuIHRvIHN0YXJ0IGEgc2VydmVyXG4gKi9cbnZhciBmaW5kU3RhcnRTY3JpcHRQYWNrYWdlSnNvbiA9IGZ1bmN0aW9uIChwYWNrYWdlSnNvbikge1xuICAgIHZhciBzY3JpcHRzID0ge307XG4gICAgLy8gVE9ETzogc3VwcG9ydCBwb3N0aW5zdGFsbFxuICAgIHZhciBwb3NzaWJsZUtleXMgPSBbXCJkZXZcIiwgXCJzdGFydFwiXTtcbiAgICB0cnkge1xuICAgICAgICBzY3JpcHRzID0gSlNPTi5wYXJzZShwYWNrYWdlSnNvbikuc2NyaXB0cztcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgY3JlYXRlRXJyb3IoXCJDb3VsZCBub3QgcGFyc2UgcGFja2FnZS5qc29uIGZpbGU6IFwiICsgZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgaW52YXJpYW50KHNjcmlwdHMsIFwiRmFpbGVkIHRvIHN0YXJ0LiBQbGVhc2UgcHJvdmlkZSBhIGBzdGFydGAgb3IgYGRldmAgc2NyaXB0IG9uIHRoZSBwYWNrYWdlLmpzb25cIik7XG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKHBvc3NpYmxlS2V5c1tpbmRleF0gaW4gc2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IHBvc3NpYmxlS2V5c1tpbmRleF07XG4gICAgICAgICAgICB2YXIgY2FuZGlkYXRlID0gc2NyaXB0c1tzY3JpcHRdO1xuICAgICAgICAgICAgdmFyIGVudl8xID0ge307XG4gICAgICAgICAgICB2YXIgY29tbWFuZF8xID0gXCJcIjtcbiAgICAgICAgICAgIHZhciBhcmdzXzEgPSBbXTtcbiAgICAgICAgICAgIHRva2VuaXplKGNhbmRpZGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHZhciBjb21tYW5kTm90Rm91bmRZZXQgPSBjb21tYW5kXzEgPT09IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gVG9rZW5UeXBlLkVudlZhcikge1xuICAgICAgICAgICAgICAgICAgICBlbnZfMSA9IGl0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09IFRva2VuVHlwZS5Db21tYW5kICYmIGNvbW1hbmROb3RGb3VuZFlldCkge1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kXzEgPSBpdGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSBUb2tlblR5cGUuQXJndW1lbnQgfHxcbiAgICAgICAgICAgICAgICAgICAgKCFjb21tYW5kTm90Rm91bmRZZXQgJiYgaXRlbS50eXBlID09PSBUb2tlblR5cGUuQ29tbWFuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc18xLnB1c2goaXRlbS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRPRE86IHN1cHBvcnQgVG9rZW5UeXBlLkFORCwgVG9rZW5UeXBlLk9SLCBUb2tlblR5cGUuUElQRVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogW2NvbW1hbmRfMSwgYXJnc18xLCB7IGVudjogZW52XzEgfV0gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHBvc3NpYmxlS2V5cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8xKGluZGV4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZV8xID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXzEudmFsdWU7XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUVycm9yKFwiRmFpbGVkIHRvIHN0YXJ0LiBQbGVhc2UgcHJvdmlkZSBhIGBzdGFydGAgb3IgYGRldmAgc2NyaXB0IG9uIHRoZSBwYWNrYWdlLmpzb25cIik7XG59O1xudmFyIGdldE1lc3NhZ2VGcm9tRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yID09PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJvYmplY3RcIiAmJiBcIm1lc3NhZ2VcIiBpbiBlcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUVycm9yKFwiVGhlIHNlcnZlciBjb3VsZCBub3QgYmUgcmVhY2hlZC4gTWFrZSBzdXJlIHRoYXQgdGhlIG5vZGUgc2NyaXB0IGlzIHJ1bm5pbmcgYW5kIHRoYXQgYSBwb3J0IGhhcyBiZWVuIHN0YXJ0ZWQuXCIpO1xufTtcblxudmFyIGNvbnNvbGVIb29rID0gXCJ2YXIgdD1cXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBzZWxmP3NlbGY6e307ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxcXFwiZGVmYXVsdFxcXCIpP3QuZGVmYXVsdDp0fXZhciBlPXt9LG49e307IWZ1bmN0aW9uKHQpe3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9W1xcXCJsb2dcXFwiLFxcXCJkZWJ1Z1xcXCIsXFxcImluZm9cXFwiLFxcXCJ3YXJuXFxcIixcXFwiZXJyb3JcXFwiLFxcXCJ0YWJsZVxcXCIsXFxcImNsZWFyXFxcIixcXFwidGltZVxcXCIsXFxcInRpbWVFbmRcXFwiLFxcXCJjb3VudFxcXCIsXFxcImFzc2VydFxcXCIsXFxcImNvbW1hbmRcXFwiLFxcXCJyZXN1bHRcXFwiXX0obik7dmFyIGEsbz17fSxpPXt9OyhhPWkpLl9fZXNNb2R1bGU9ITAsYS5kZWZhdWx0PWZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24oKXtyZXR1cm4oNjU1MzYqKDErTWF0aC5yYW5kb20oKSl8MCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKX07cmV0dXJuIHQoKSt0KCkrXFxcIi1cXFwiK3QoKStcXFwiLVxcXCIrdCgpK1xcXCItXFxcIit0KCkrXFxcIi1cXFwiK3QoKStcXFwiLVxcXCIrRGF0ZS5ub3coKX07dmFyIHU9e30scz17X19lc01vZHVsZTohMH07cy51cGRhdGU9cy5zdGF0ZT12b2lkIDAscy51cGRhdGU9ZnVuY3Rpb24odCl7cy5zdGF0ZT10fTt2YXIgZj17fSxjPXt9OyFmdW5jdGlvbihyKXt2YXIgZT10JiZ0Ll9fYXNzaWdufHxmdW5jdGlvbigpe3JldHVybiBlPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHQpe2Zvcih2YXIgcixlPTEsbj1hcmd1bWVudHMubGVuZ3RoO2U8bjtlKyspZm9yKHZhciBhIGluIHI9YXJndW1lbnRzW2VdKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLGEpJiYodFthXT1yW2FdKTtyZXR1cm4gdH0sZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3IuX19lc01vZHVsZT0hMCxyLmluaXRpYWxTdGF0ZT12b2lkIDAsci5pbml0aWFsU3RhdGU9e3RpbWluZ3M6e30sY291bnQ6e319O3ZhciBuPWZ1bmN0aW9uKCl7cmV0dXJuXFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBwZXJmb3JtYW5jZSYmcGVyZm9ybWFuY2Uubm93P3BlcmZvcm1hbmNlLm5vdygpOkRhdGUubm93KCl9O3IuZGVmYXVsdD1mdW5jdGlvbih0LGEpe3ZhciBvLGksdTtzd2l0Y2godm9pZCAwPT09dCYmKHQ9ci5pbml0aWFsU3RhdGUpLGEudHlwZSl7Y2FzZVxcXCJDT1VOVFxcXCI6dmFyIHM9dC5jb3VudFthLm5hbWVdfHwwO3JldHVybiBlKGUoe30sdCkse2NvdW50OmUoZSh7fSx0LmNvdW50KSwobz17fSxvW2EubmFtZV09cysxLG8pKX0pO2Nhc2VcXFwiVElNRV9TVEFSVFxcXCI6cmV0dXJuIGUoZSh7fSx0KSx7dGltaW5nczplKGUoe30sdC50aW1pbmdzKSwoaT17fSxpW2EubmFtZV09e3N0YXJ0Om4oKX0saSkpfSk7Y2FzZVxcXCJUSU1FX0VORFxcXCI6dmFyIGY9dC50aW1pbmdzW2EubmFtZV0sYz1uKCksbD1jLWYuc3RhcnQ7cmV0dXJuIGUoZSh7fSx0KSx7dGltaW5nczplKGUoe30sdC50aW1pbmdzKSwodT17fSx1W2EubmFtZV09ZShlKHt9LGYpLHtlbmQ6Yyx0aW1lOmx9KSx1KSl9KTtkZWZhdWx0OnJldHVybiB0fX19KGMpLGZ1bmN0aW9uKHIpe3ZhciBlPXQmJnQuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19O3IuX19lc01vZHVsZT0hMDt2YXIgbj1lKGMpLGE9cztyLmRlZmF1bHQ9ZnVuY3Rpb24odCl7YS51cGRhdGUobi5kZWZhdWx0KGEuc3RhdGUsdCkpfX0oZik7dmFyIGw9e19fZXNNb2R1bGU6ITB9O2wudGltZUVuZD1sLnRpbWVTdGFydD1sLmNvdW50PXZvaWQgMCxsLmNvdW50PWZ1bmN0aW9uKHQpe3JldHVybnt0eXBlOlxcXCJDT1VOVFxcXCIsbmFtZTp0fX0sbC50aW1lU3RhcnQ9ZnVuY3Rpb24odCl7cmV0dXJue3R5cGU6XFxcIlRJTUVfU1RBUlRcXFwiLG5hbWU6dH19LGwudGltZUVuZD1mdW5jdGlvbih0KXtyZXR1cm57dHlwZTpcXFwiVElNRV9FTkRcXFwiLG5hbWU6dH19O3ZhciBkPXQmJnQuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19O3UuX19lc01vZHVsZT0hMCx1LnN0b3A9dS5zdGFydD12b2lkIDA7dmFyIHA9cyxoPWQoZiksbT1sO3Uuc3RhcnQ9ZnVuY3Rpb24odCl7aC5kZWZhdWx0KG0udGltZVN0YXJ0KHQpKX0sdS5zdG9wPWZ1bmN0aW9uKHQpe3ZhciByPW51bGw9PT1wLnN0YXRlfHx2b2lkIDA9PT1wLnN0YXRlP3ZvaWQgMDpwLnN0YXRlLnRpbWluZ3NbdF07cmV0dXJuIHImJiFyLmVuZD8oaC5kZWZhdWx0KG0udGltZUVuZCh0KSkse21ldGhvZDpcXFwibG9nXFxcIixkYXRhOlt0K1xcXCI6IFxcXCIrcC5zdGF0ZS50aW1pbmdzW3RdLnRpbWUrXFxcIm1zXFxcIl19KTp7bWV0aG9kOlxcXCJ3YXJuXFxcIixkYXRhOltcXFwiVGltZXIgJ1xcXCIrdCtcXFwiJyBkb2VzIG5vdCBleGlzdFxcXCJdfX07dmFyIHk9e30sdj10JiZ0Ll9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fTt5Ll9fZXNNb2R1bGU9ITAseS5pbmNyZW1lbnQ9dm9pZCAwO3ZhciBfPXMsYj12KGYpLGc9bDt5LmluY3JlbWVudD1mdW5jdGlvbih0KXtyZXR1cm4gYi5kZWZhdWx0KGcuY291bnQodCkpLHttZXRob2Q6XFxcImxvZ1xcXCIsZGF0YTpbdCtcXFwiOiBcXFwiK18uc3RhdGUuY291bnRbdF1dfX07dmFyIE09e30sVD10JiZ0Ll9fc3ByZWFkQXJyYXlzfHxmdW5jdGlvbigpe2Zvcih2YXIgdD0wLHI9MCxlPWFyZ3VtZW50cy5sZW5ndGg7cjxlO3IrKyl0Kz1hcmd1bWVudHNbcl0ubGVuZ3RoO3ZhciBuPUFycmF5KHQpLGE9MDtmb3Iocj0wO3I8ZTtyKyspZm9yKHZhciBvPWFyZ3VtZW50c1tyXSxpPTAsdT1vLmxlbmd0aDtpPHU7aSsrLGErKyluW2FdPW9baV07cmV0dXJuIG59O00uX19lc01vZHVsZT0hMCxNLnRlc3Q9dm9pZCAwLE0udGVzdD1mdW5jdGlvbih0KXtmb3IodmFyIHI9W10sZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspcltlLTFdPWFyZ3VtZW50c1tlXTtyZXR1cm4hdCYmKDA9PT1yLmxlbmd0aCYmci5wdXNoKFxcXCJjb25zb2xlLmFzc2VydFxcXCIpLHttZXRob2Q6XFxcImVycm9yXFxcIixkYXRhOlQoW1xcXCJBc3NlcnRpb24gZmFpbGVkOlxcXCJdLHIpfSl9LGZ1bmN0aW9uKHIpe3ZhciBlPXQmJnQuX19hc3NpZ258fGZ1bmN0aW9uKCl7cmV0dXJuIGU9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odCl7Zm9yKHZhciByLGU9MSxuPWFyZ3VtZW50cy5sZW5ndGg7ZTxuO2UrKylmb3IodmFyIGEgaW4gcj1hcmd1bWVudHNbZV0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsYSkmJih0W2FdPXJbYV0pO3JldHVybiB0fSxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sbj10JiZ0Ll9fY3JlYXRlQmluZGluZ3x8KE9iamVjdC5jcmVhdGU/ZnVuY3Rpb24odCxyLGUsbil7dm9pZCAwPT09biYmKG49ZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcltlXX19KX06ZnVuY3Rpb24odCxyLGUsbil7dm9pZCAwPT09biYmKG49ZSksdFtuXT1yW2VdfSksYT10JiZ0Ll9fc2V0TW9kdWxlRGVmYXVsdHx8KE9iamVjdC5jcmVhdGU/ZnVuY3Rpb24odCxyKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiZGVmYXVsdFxcXCIse2VudW1lcmFibGU6ITAsdmFsdWU6cn0pfTpmdW5jdGlvbih0LHIpe3QuZGVmYXVsdD1yfSksbz10JiZ0Ll9faW1wb3J0U3Rhcnx8ZnVuY3Rpb24odCl7aWYodCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciByPXt9O2lmKG51bGwhPXQpZm9yKHZhciBlIGluIHQpXFxcImRlZmF1bHRcXFwiIT09ZSYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkmJm4ocix0LGUpO3JldHVybiBhKHIsdCkscn0scz10JiZ0Ll9fc3ByZWFkQXJyYXlzfHxmdW5jdGlvbigpe2Zvcih2YXIgdD0wLHI9MCxlPWFyZ3VtZW50cy5sZW5ndGg7cjxlO3IrKyl0Kz1hcmd1bWVudHNbcl0ubGVuZ3RoO3ZhciBuPUFycmF5KHQpLGE9MDtmb3Iocj0wO3I8ZTtyKyspZm9yKHZhciBvPWFyZ3VtZW50c1tyXSxpPTAsdT1vLmxlbmd0aDtpPHU7aSsrLGErKyluW2FdPW9baV07cmV0dXJuIG59LGY9dCYmdC5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX07ci5fX2VzTW9kdWxlPSEwO3ZhciBjPWYoaSksbD1vKHUpLGQ9byh5KSxwPW8oTSk7ci5kZWZhdWx0PWZ1bmN0aW9uKHQscixuKXt2YXIgYT1ufHxjLmRlZmF1bHQoKTtzd2l0Y2godCl7Y2FzZVxcXCJjbGVhclxcXCI6cmV0dXJue21ldGhvZDp0LGlkOmF9O2Nhc2VcXFwiY291bnRcXFwiOnJldHVybiEhKG89XFxcInN0cmluZ1xcXCI9PXR5cGVvZiByWzBdP3JbMF06XFxcImRlZmF1bHRcXFwiKSYmZShlKHt9LGQuaW5jcmVtZW50KG8pKSx7aWQ6YX0pO2Nhc2VcXFwidGltZVxcXCI6Y2FzZVxcXCJ0aW1lRW5kXFxcIjp2YXIgbztyZXR1cm4hIShvPVxcXCJzdHJpbmdcXFwiPT10eXBlb2YgclswXT9yWzBdOlxcXCJkZWZhdWx0XFxcIikmJihcXFwidGltZVxcXCI9PT10PyhsLnN0YXJ0KG8pLCExKTplKGUoe30sbC5zdG9wKG8pKSx7aWQ6YX0pKTtjYXNlXFxcImFzc2VydFxcXCI6aWYoMCE9PXIubGVuZ3RoKXt2YXIgaT1wLnRlc3QuYXBwbHkocCxzKFtyWzBdXSxyLnNsaWNlKDEpKSk7aWYoaSlyZXR1cm4gZShlKHt9LGkpLHtpZDphfSl9cmV0dXJuITE7Y2FzZVxcXCJlcnJvclxcXCI6cmV0dXJue21ldGhvZDp0LGlkOmEsZGF0YTpyLm1hcCgoZnVuY3Rpb24odCl7dHJ5e3JldHVybiB0LnN0YWNrfHx0fWNhdGNoKHIpe3JldHVybiB0fX0pKX07ZGVmYXVsdDpyZXR1cm57bWV0aG9kOnQsaWQ6YSxkYXRhOnJ9fX19KG8pO3ZhciBTPXt9LE89e307IWZ1bmN0aW9uKHQpe3ZhciByO3QuX19lc01vZHVsZT0hMCxmdW5jdGlvbih0KXt0W3QuaW5maW5pdHk9MF09XFxcImluZmluaXR5XFxcIix0W3QubWludXNJbmZpbml0eT0xXT1cXFwibWludXNJbmZpbml0eVxcXCIsdFt0Lm1pbnVzWmVybz0yXT1cXFwibWludXNaZXJvXFxcIn0ocnx8KHI9e30pKSx0LmRlZmF1bHQ9e3R5cGU6XFxcIkFyaXRobWV0aWNcXFwiLGxvb2t1cDpOdW1iZXIsc2hvdWxkVHJhbnNmb3JtOmZ1bmN0aW9uKHQscil7cmV0dXJuXFxcIm51bWJlclxcXCI9PT10JiYocj09PTEvMHx8cj09PS0xLzB8fGZ1bmN0aW9uKHQpe3JldHVybiAxL3Q9PS0xLzB9KHIpKX0sdG9TZXJpYWxpemFibGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT0xLzA/ci5pbmZpbml0eTp0PT09LTEvMD9yLm1pbnVzSW5maW5pdHk6ci5taW51c1plcm99LGZyb21TZXJpYWxpemFibGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1yLmluZmluaXR5PzEvMDp0PT09ci5taW51c0luZmluaXR5Py0xLzA6dD09PXIubWludXNaZXJvPy0wOnR9fX0oTyk7dmFyIHc9e307IWZ1bmN0aW9uKHQpe3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9e3R5cGU6XFxcIkZ1bmN0aW9uXFxcIixsb29rdXA6RnVuY3Rpb24sc2hvdWxkVHJhbnNmb3JtOmZ1bmN0aW9uKHQscil7cmV0dXJuXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHJ9LHRvU2VyaWFsaXphYmxlOmZ1bmN0aW9uKHQpe3ZhciByPVxcXCJcXFwiO3RyeXtyPXQudG9TdHJpbmcoKS5zdWJzdHJpbmcoci5pbmRleE9mKFxcXCJ7XFxcIikrMSxyLmxhc3RJbmRleE9mKFxcXCJ9XFxcIikpfWNhdGNoKHQpe31yZXR1cm57bmFtZTp0Lm5hbWUsYm9keTpyLHByb3RvOk9iamVjdC5nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3Rvci5uYW1lfX0sZnJvbVNlcmlhbGl6YWJsZTpmdW5jdGlvbih0KXt0cnl7dmFyIHI9ZnVuY3Rpb24oKXt9O3JldHVyblxcXCJzdHJpbmdcXFwiPT10eXBlb2YgdC5uYW1lJiZPYmplY3QuZGVmaW5lUHJvcGVydHkocixcXFwibmFtZVxcXCIse3ZhbHVlOnQubmFtZSx3cml0YWJsZTohMX0pLFxcXCJzdHJpbmdcXFwiPT10eXBlb2YgdC5ib2R5JiZPYmplY3QuZGVmaW5lUHJvcGVydHkocixcXFwiYm9keVxcXCIse3ZhbHVlOnQuYm9keSx3cml0YWJsZTohMX0pLFxcXCJzdHJpbmdcXFwiPT10eXBlb2YgdC5wcm90byYmKHIuY29uc3RydWN0b3I9e25hbWU6dC5wcm90b30pLHJ9Y2F0Y2gocil7cmV0dXJuIHR9fX19KHcpO3ZhciBBPXt9OyFmdW5jdGlvbih0KXt2YXIgcjtmdW5jdGlvbiBlKHQpe2Zvcih2YXIgcj17fSxlPTAsbj10LmF0dHJpYnV0ZXM7ZTxuLmxlbmd0aDtlKyspe3ZhciBhPW5bZV07clthLm5hbWVdPWEudmFsdWV9cmV0dXJuIHJ9dC5fX2VzTW9kdWxlPSEwLHQuZGVmYXVsdD17dHlwZTpcXFwiSFRNTEVsZW1lbnRcXFwiLHNob3VsZFRyYW5zZm9ybTpmdW5jdGlvbih0LHIpe3JldHVybiByJiZyLmNoaWxkcmVuJiZcXFwic3RyaW5nXFxcIj09dHlwZW9mIHIuaW5uZXJIVE1MJiZcXFwic3RyaW5nXFxcIj09dHlwZW9mIHIudGFnTmFtZX0sdG9TZXJpYWxpemFibGU6ZnVuY3Rpb24odCl7cmV0dXJue3RhZ05hbWU6dC50YWdOYW1lLnRvTG93ZXJDYXNlKCksYXR0cmlidXRlczplKHQpLGlubmVySFRNTDp0LmlubmVySFRNTH19LGZyb21TZXJpYWxpemFibGU6ZnVuY3Rpb24odCl7dHJ5e3ZhciBlPShyfHwocj1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXFxcInNhbmRib3hcXFwiKSkpLmNyZWF0ZUVsZW1lbnQodC50YWdOYW1lKTtlLmlubmVySFRNTD10LmlubmVySFRNTDtmb3IodmFyIG49MCxhPU9iamVjdC5rZXlzKHQuYXR0cmlidXRlcyk7bjxhLmxlbmd0aDtuKyspe3ZhciBvPWFbbl07dHJ5e2Uuc2V0QXR0cmlidXRlKG8sdC5hdHRyaWJ1dGVzW29dKX1jYXRjaCh0KXt9fXJldHVybiBlfWNhdGNoKHIpe3JldHVybiB0fX19fShBKTt2YXIgaj17fTshZnVuY3Rpb24ocil7dmFyIGU9dCYmdC5fX2Fzc2lnbnx8ZnVuY3Rpb24oKXtyZXR1cm4gZT1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0KXtmb3IodmFyIHIsZT0xLG49YXJndW1lbnRzLmxlbmd0aDtlPG47ZSsrKWZvcih2YXIgYSBpbiByPWFyZ3VtZW50c1tlXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocixhKSYmKHRbYV09clthXSk7cmV0dXJuIHR9LGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyLl9fZXNNb2R1bGU9ITAsci5kZWZhdWx0PXt0eXBlOlxcXCJNYXBcXFwiLHNob3VsZFRyYW5zZm9ybTpmdW5jdGlvbih0LHIpe3JldHVybiByJiZyLmNvbnN0cnVjdG9yJiZcXFwiTWFwXFxcIj09PXIuY29uc3RydWN0b3IubmFtZX0sdG9TZXJpYWxpemFibGU6ZnVuY3Rpb24odCl7dmFyIHI9e307cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCxlKXt2YXIgbj1cXFwib2JqZWN0XFxcIj09dHlwZW9mIGU/SlNPTi5zdHJpbmdpZnkoZSk6ZTtyW25dPXR9KSkse25hbWU6XFxcIk1hcFxcXCIsYm9keTpyLHByb3RvOk9iamVjdC5nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3Rvci5uYW1lfX0sZnJvbVNlcmlhbGl6YWJsZTpmdW5jdGlvbih0KXt2YXIgcj10LmJvZHksbj1lKHt9LHIpO3JldHVyblxcXCJzdHJpbmdcXFwiPT10eXBlb2YgdC5wcm90byYmKG4uY29uc3RydWN0b3I9e25hbWU6dC5wcm90b30pLG59fX0oaik7dmFyIHo9e307IWZ1bmN0aW9uKHQpe3QuX19lc01vZHVsZT0hMDt2YXIgcj1cXFwiQHRcXFwiLGU9L14jKkAodHxyKSQvLG49KDAsZXZhbCkoXFxcInRoaXNcXFwiKSxhPVxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBBcnJheUJ1ZmZlcixvPVxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBNYXAsaT1cXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgU2V0LHU9W1xcXCJJbnQ4QXJyYXlcXFwiLFxcXCJVaW50OEFycmF5XFxcIixcXFwiVWludDhDbGFtcGVkQXJyYXlcXFwiLFxcXCJJbnQxNkFycmF5XFxcIixcXFwiVWludDE2QXJyYXlcXFwiLFxcXCJJbnQzMkFycmF5XFxcIixcXFwiVWludDMyQXJyYXlcXFwiLFxcXCJGbG9hdDMyQXJyYXlcXFwiLFxcXCJGbG9hdDY0QXJyYXlcXFwiXSxzPUFycmF5LnByb3RvdHlwZS5zbGljZSxmPXtzZXJpYWxpemU6ZnVuY3Rpb24odCl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHQpfSxkZXNlcmlhbGl6ZTpmdW5jdGlvbih0KXtyZXR1cm4gSlNPTi5wYXJzZSh0KX19LGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQscil7dGhpcy5yZWZlcmVuY2VzPXQsdGhpcy50cmFuc2Zvcm1zPXIsdGhpcy50cmFuc2Zvcm1zTWFwPXRoaXMuX21ha2VUcmFuc2Zvcm1zTWFwKCksdGhpcy5jaXJjdWxhckNhbmRpZGF0ZXM9W10sdGhpcy5jaXJjdWxhckNhbmRpZGF0ZXNEZXNjcnM9W10sdGhpcy5jaXJjdWxhclJlZkNvdW50PTB9cmV0dXJuIHQuX2NyZWF0ZVJlZk1hcms9ZnVuY3Rpb24odCl7dmFyIHI9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gcltcXFwiQHJcXFwiXT10LHJ9LHQucHJvdG90eXBlLl9jcmVhdGVDaXJjdWxhckNhbmRpZGF0ZT1mdW5jdGlvbih0LHIsZSl7dGhpcy5jaXJjdWxhckNhbmRpZGF0ZXMucHVzaCh0KSx0aGlzLmNpcmN1bGFyQ2FuZGlkYXRlc0Rlc2Nycy5wdXNoKHtwYXJlbnQ6cixrZXk6ZSxyZWZJZHg6LTF9KX0sdC5wcm90b3R5cGUuX2FwcGx5VHJhbnNmb3JtPWZ1bmN0aW9uKHQsZSxuLGEpe3ZhciBvPU9iamVjdC5jcmVhdGUobnVsbCksaT1hLnRvU2VyaWFsaXphYmxlKHQpO3JldHVyblxcXCJvYmplY3RcXFwiPT10eXBlb2YgaSYmdGhpcy5fY3JlYXRlQ2lyY3VsYXJDYW5kaWRhdGUodCxlLG4pLG9bcl09YS50eXBlLG8uZGF0YT10aGlzLl9oYW5kbGVWYWx1ZSgoZnVuY3Rpb24oKXtyZXR1cm4gaX0pLGUsbiksb30sdC5wcm90b3R5cGUuX2hhbmRsZUFycmF5PWZ1bmN0aW9uKHQpe2Zvcih2YXIgcj1bXSxlPWZ1bmN0aW9uKGUpe3JbZV09bi5faGFuZGxlVmFsdWUoKGZ1bmN0aW9uKCl7cmV0dXJuIHRbZV19KSxyLGUpfSxuPXRoaXMsYT0wO2E8dC5sZW5ndGg7YSsrKWUoYSk7cmV0dXJuIHJ9LHQucHJvdG90eXBlLl9oYW5kbGVQbGFpbk9iamVjdD1mdW5jdGlvbih0KXt2YXIgcixuLGE9T2JqZWN0LmNyZWF0ZShudWxsKSxvPWZ1bmN0aW9uKHIpe2lmKFJlZmxlY3QuaGFzKHQscikpe3ZhciBuPWUudGVzdChyKT9cXFwiI1xcXCIrcjpyO2Fbbl09aS5faGFuZGxlVmFsdWUoKGZ1bmN0aW9uKCl7cmV0dXJuIHRbcl19KSxhLG4pfX0saT10aGlzO2Zvcih2YXIgdSBpbiB0KW8odSk7dmFyIHM9bnVsbD09PShuPW51bGw9PT0ocj1udWxsPT10P3ZvaWQgMDp0Ll9fcHJvdG9fXyl8fHZvaWQgMD09PXI/dm9pZCAwOnIuY29uc3RydWN0b3IpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLm5hbWU7cmV0dXJuIHMmJlxcXCJPYmplY3RcXFwiIT09cyYmKGEuY29uc3RydWN0b3I9e25hbWU6c30pLGF9LHQucHJvdG90eXBlLl9oYW5kbGVPYmplY3Q9ZnVuY3Rpb24odCxyLGUpe3JldHVybiB0aGlzLl9jcmVhdGVDaXJjdWxhckNhbmRpZGF0ZSh0LHIsZSksQXJyYXkuaXNBcnJheSh0KT90aGlzLl9oYW5kbGVBcnJheSh0KTp0aGlzLl9oYW5kbGVQbGFpbk9iamVjdCh0KX0sdC5wcm90b3R5cGUuX2Vuc3VyZUNpcmN1bGFyUmVmZXJlbmNlPWZ1bmN0aW9uKHIpe3ZhciBlPXRoaXMuY2lyY3VsYXJDYW5kaWRhdGVzLmluZGV4T2Yocik7aWYoZT4tMSl7dmFyIG49dGhpcy5jaXJjdWxhckNhbmRpZGF0ZXNEZXNjcnNbZV07cmV0dXJuLTE9PT1uLnJlZklkeCYmKG4ucmVmSWR4PW4ucGFyZW50PysrdGhpcy5jaXJjdWxhclJlZkNvdW50OjApLHQuX2NyZWF0ZVJlZk1hcmsobi5yZWZJZHgpfXJldHVybiBudWxsfSx0LnByb3RvdHlwZS5faGFuZGxlVmFsdWU9ZnVuY3Rpb24odCxyLGUpe3RyeXt2YXIgbj10KCksYT10eXBlb2YgbixvPVxcXCJvYmplY3RcXFwiPT09YSYmbnVsbCE9PW47aWYobyl7dmFyIGk9dGhpcy5fZW5zdXJlQ2lyY3VsYXJSZWZlcmVuY2Uobik7aWYoaSlyZXR1cm4gaX12YXIgdT10aGlzLl9maW5kVHJhbnNmb3JtKGEsbik7cmV0dXJuIHU/dGhpcy5fYXBwbHlUcmFuc2Zvcm0obixyLGUsdSk6bz90aGlzLl9oYW5kbGVPYmplY3QobixyLGUpOm59Y2F0Y2godCl7dHJ5e3JldHVybiB0aGlzLl9oYW5kbGVWYWx1ZSgoZnVuY3Rpb24oKXtyZXR1cm4gdCBpbnN0YW5jZW9mIEVycm9yP3Q6bmV3IEVycm9yKHQpfSkscixlKX1jYXRjaCh0KXtyZXR1cm4gbnVsbH19fSx0LnByb3RvdHlwZS5fbWFrZVRyYW5zZm9ybXNNYXA9ZnVuY3Rpb24oKXtpZihvKXt2YXIgdD1uZXcgTWFwO3JldHVybiB0aGlzLnRyYW5zZm9ybXMuZm9yRWFjaCgoZnVuY3Rpb24ocil7ci5sb29rdXAmJnQuc2V0KHIubG9va3VwLHIpfSkpLHR9fSx0LnByb3RvdHlwZS5fZmluZFRyYW5zZm9ybT1mdW5jdGlvbih0LHIpe2lmKG8mJnImJnIuY29uc3RydWN0b3ImJihudWxsPT0oYT10aGlzLnRyYW5zZm9ybXNNYXAuZ2V0KHIuY29uc3RydWN0b3IpKT92b2lkIDA6YS5zaG91bGRUcmFuc2Zvcm0odCxyKSkpcmV0dXJuIGE7Zm9yKHZhciBlPTAsbj10aGlzLnRyYW5zZm9ybXM7ZTxuLmxlbmd0aDtlKyspe3ZhciBhO2lmKChhPW5bZV0pLnNob3VsZFRyYW5zZm9ybSh0LHIpKXJldHVybiBhfX0sdC5wcm90b3R5cGUudHJhbnNmb3JtPWZ1bmN0aW9uKCl7Zm9yKHZhciByPXRoaXMsZT1bdGhpcy5faGFuZGxlVmFsdWUoKGZ1bmN0aW9uKCl7cmV0dXJuIHIucmVmZXJlbmNlc30pLG51bGwsbnVsbCldLG49MCxhPXRoaXMuY2lyY3VsYXJDYW5kaWRhdGVzRGVzY3JzO248YS5sZW5ndGg7bisrKXt2YXIgbz1hW25dO28ucmVmSWR4PjAmJihlW28ucmVmSWR4XT1vLnBhcmVudFtvLmtleV0sby5wYXJlbnRbby5rZXldPXQuX2NyZWF0ZVJlZk1hcmsoby5yZWZJZHgpKX1yZXR1cm4gZX0sdH0oKSxsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LHIpe3RoaXMuYWN0aXZlVHJhbnNmb3Jtc1N0YWNrPVtdLHRoaXMudmlzaXRlZFJlZnM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLnJlZmVyZW5jZXM9dCx0aGlzLnRyYW5zZm9ybU1hcD1yfXJldHVybiB0LnByb3RvdHlwZS5faGFuZGxlUGxhaW5PYmplY3Q9ZnVuY3Rpb24odCl7dmFyIHI9T2JqZWN0LmNyZWF0ZShudWxsKTtmb3IodmFyIG4gaW5cXFwiY29uc3RydWN0b3JcXFwiaW4gdCYmKHQuY29uc3RydWN0b3ImJlxcXCJzdHJpbmdcXFwiPT10eXBlb2YgdC5jb25zdHJ1Y3Rvci5uYW1lfHwodC5jb25zdHJ1Y3Rvcj17bmFtZTpcXFwiT2JqZWN0XFxcIn0pKSx0KXQuaGFzT3duUHJvcGVydHkobikmJih0aGlzLl9oYW5kbGVWYWx1ZSh0W25dLHQsbiksZS50ZXN0KG4pJiYocltuLnN1YnN0cmluZygxKV09dFtuXSxkZWxldGUgdFtuXSkpO2Zvcih2YXIgYSBpbiByKXRbYV09clthXX0sdC5wcm90b3R5cGUuX2hhbmRsZVRyYW5zZm9ybWVkT2JqZWN0PWZ1bmN0aW9uKHQsZSxuKXt2YXIgYT10W3JdLG89dGhpcy50cmFuc2Zvcm1NYXBbYV07aWYoIW8pdGhyb3cgbmV3IEVycm9yKFxcXCJDYW4ndCBmaW5kIHRyYW5zZm9ybSBmb3IgXFxcXFxcXCJcXFwiK2ErJ1xcXCIgdHlwZS4nKTt0aGlzLmFjdGl2ZVRyYW5zZm9ybXNTdGFjay5wdXNoKHQpLHRoaXMuX2hhbmRsZVZhbHVlKHQuZGF0YSx0LFxcXCJkYXRhXFxcIiksdGhpcy5hY3RpdmVUcmFuc2Zvcm1zU3RhY2sucG9wKCksZVtuXT1vLmZyb21TZXJpYWxpemFibGUodC5kYXRhKX0sdC5wcm90b3R5cGUuX2hhbmRsZUNpcmN1bGFyU2VsZlJlZkR1cmluZ1RyYW5zZm9ybT1mdW5jdGlvbih0LHIsZSl7dmFyIG49dGhpcy5yZWZlcmVuY2VzO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLGUse3ZhbDp2b2lkIDAsY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PXRoaXMudmFsJiYodGhpcy52YWw9blt0XSksdGhpcy52YWx9LHNldDpmdW5jdGlvbih0KXt0aGlzLnZhbD10fX0pfSx0LnByb3RvdHlwZS5faGFuZGxlQ2lyY3VsYXJSZWY9ZnVuY3Rpb24odCxyLGUpe3RoaXMuYWN0aXZlVHJhbnNmb3Jtc1N0YWNrLmluY2x1ZGVzKHRoaXMucmVmZXJlbmNlc1t0XSk/dGhpcy5faGFuZGxlQ2lyY3VsYXJTZWxmUmVmRHVyaW5nVHJhbnNmb3JtKHQscixlKToodGhpcy52aXNpdGVkUmVmc1t0XXx8KHRoaXMudmlzaXRlZFJlZnNbdF09ITAsdGhpcy5faGFuZGxlVmFsdWUodGhpcy5yZWZlcmVuY2VzW3RdLHRoaXMucmVmZXJlbmNlcyx0KSkscltlXT10aGlzLnJlZmVyZW5jZXNbdF0pfSx0LnByb3RvdHlwZS5faGFuZGxlVmFsdWU9ZnVuY3Rpb24odCxlLG4pe2lmKFxcXCJvYmplY3RcXFwiPT10eXBlb2YgdCYmbnVsbCE9PXQpe3ZhciBhPXRbXFxcIkByXFxcIl07aWYodm9pZCAwIT09YSl0aGlzLl9oYW5kbGVDaXJjdWxhclJlZihhLGUsbik7ZWxzZSBpZih0W3JdKXRoaXMuX2hhbmRsZVRyYW5zZm9ybWVkT2JqZWN0KHQsZSxuKTtlbHNlIGlmKEFycmF5LmlzQXJyYXkodCkpZm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspdGhpcy5faGFuZGxlVmFsdWUodFtvXSx0LG8pO2Vsc2UgdGhpcy5faGFuZGxlUGxhaW5PYmplY3QodCl9fSx0LnByb3RvdHlwZS50cmFuc2Zvcm09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aXNpdGVkUmVmc1swXT0hMCx0aGlzLl9oYW5kbGVWYWx1ZSh0aGlzLnJlZmVyZW5jZXNbMF0sdGhpcy5yZWZlcmVuY2VzLDApLHRoaXMucmVmZXJlbmNlc1swXX0sdH0oKSxkPVt7dHlwZTpcXFwiW1tOYU5dXVxcXCIsc2hvdWxkVHJhbnNmb3JtOmZ1bmN0aW9uKHQscil7cmV0dXJuXFxcIm51bWJlclxcXCI9PT10JiZpc05hTihyKX0sdG9TZXJpYWxpemFibGU6ZnVuY3Rpb24oKXtyZXR1cm5cXFwiXFxcIn0sZnJvbVNlcmlhbGl6YWJsZTpmdW5jdGlvbigpe3JldHVybiBOYU59fSx7dHlwZTpcXFwiW1t1bmRlZmluZWRdXVxcXCIsc2hvdWxkVHJhbnNmb3JtOmZ1bmN0aW9uKHQpe3JldHVyblxcXCJ1bmRlZmluZWRcXFwiPT09dH0sdG9TZXJpYWxpemFibGU6ZnVuY3Rpb24oKXtyZXR1cm5cXFwiXFxcIn0sZnJvbVNlcmlhbGl6YWJsZTpmdW5jdGlvbigpe319LHt0eXBlOlxcXCJbW0RhdGVdXVxcXCIsbG9va3VwOkRhdGUsc2hvdWxkVHJhbnNmb3JtOmZ1bmN0aW9uKHQscil7cmV0dXJuIHIgaW5zdGFuY2VvZiBEYXRlfSx0b1NlcmlhbGl6YWJsZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5nZXRUaW1lKCl9LGZyb21TZXJpYWxpemFibGU6ZnVuY3Rpb24odCl7dmFyIHI9bmV3IERhdGU7cmV0dXJuIHIuc2V0VGltZSh0KSxyfX0se3R5cGU6XFxcIltbUmVnRXhwXV1cXFwiLGxvb2t1cDpSZWdFeHAsc2hvdWxkVHJhbnNmb3JtOmZ1bmN0aW9uKHQscil7cmV0dXJuIHIgaW5zdGFuY2VvZiBSZWdFeHB9LHRvU2VyaWFsaXphYmxlOmZ1bmN0aW9uKHQpe3ZhciByPXtzcmM6dC5zb3VyY2UsZmxhZ3M6XFxcIlxcXCJ9O3JldHVybiB0Lmdsb2JhbFRoaXMmJihyLmZsYWdzKz1cXFwiZ1xcXCIpLHQuaWdub3JlQ2FzZSYmKHIuZmxhZ3MrPVxcXCJpXFxcIiksdC5tdWx0aWxpbmUmJihyLmZsYWdzKz1cXFwibVxcXCIpLHJ9LGZyb21TZXJpYWxpemFibGU6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBSZWdFeHAodC5zcmMsdC5mbGFncyl9fSx7dHlwZTpcXFwiW1tFcnJvcl1dXFxcIixsb29rdXA6RXJyb3Isc2hvdWxkVHJhbnNmb3JtOmZ1bmN0aW9uKHQscil7cmV0dXJuIHIgaW5zdGFuY2VvZiBFcnJvcn0sdG9TZXJpYWxpemFibGU6ZnVuY3Rpb24odCl7dmFyIHIsZTtyZXR1cm4gdC5zdGFja3x8bnVsbD09PShlPShyPUVycm9yKS5jYXB0dXJlU3RhY2tUcmFjZSl8fHZvaWQgMD09PWV8fGUuY2FsbChyLHQpLHtuYW1lOnQubmFtZSxtZXNzYWdlOnQubWVzc2FnZSxzdGFjazp0LnN0YWNrfX0sZnJvbVNlcmlhbGl6YWJsZTpmdW5jdGlvbih0KXt2YXIgcj1uZXcoblt0Lm5hbWVdfHxFcnJvcikodC5tZXNzYWdlKTtyZXR1cm4gci5zdGFjaz10LnN0YWNrLHJ9fSx7dHlwZTpcXFwiW1tBcnJheUJ1ZmZlcl1dXFxcIixsb29rdXA6YSYmQXJyYXlCdWZmZXIsc2hvdWxkVHJhbnNmb3JtOmZ1bmN0aW9uKHQscil7cmV0dXJuIGEmJnIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcn0sdG9TZXJpYWxpemFibGU6ZnVuY3Rpb24odCl7dmFyIHI9bmV3IEludDhBcnJheSh0KTtyZXR1cm4gcy5jYWxsKHIpfSxmcm9tU2VyaWFsaXphYmxlOmZ1bmN0aW9uKHQpe2lmKGEpe3ZhciByPW5ldyBBcnJheUJ1ZmZlcih0Lmxlbmd0aCk7cmV0dXJuIG5ldyBJbnQ4QXJyYXkocikuc2V0KHQpLHJ9cmV0dXJuIHR9fSx7dHlwZTpcXFwiW1tUeXBlZEFycmF5XV1cXFwiLHNob3VsZFRyYW5zZm9ybTpmdW5jdGlvbih0LHIpe2lmKGEpcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyhyKSYmIShyIGluc3RhbmNlb2YgRGF0YVZpZXcpO2Zvcih2YXIgZT0wLG89dTtlPG8ubGVuZ3RoO2UrKyl7dmFyIGk9b1tlXTtpZihcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgbltpXSYmciBpbnN0YW5jZW9mIG5baV0pcmV0dXJuITB9cmV0dXJuITF9LHRvU2VyaWFsaXphYmxlOmZ1bmN0aW9uKHQpe3JldHVybntjdG9yTmFtZTp0LmNvbnN0cnVjdG9yLm5hbWUsYXJyOnMuY2FsbCh0KX19LGZyb21TZXJpYWxpemFibGU6ZnVuY3Rpb24odCl7cmV0dXJuXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIG5bdC5jdG9yTmFtZV0/bmV3IG5bdC5jdG9yTmFtZV0odC5hcnIpOnQuYXJyfX0se3R5cGU6XFxcIltbTWFwXV1cXFwiLGxvb2t1cDpvJiZNYXAsc2hvdWxkVHJhbnNmb3JtOmZ1bmN0aW9uKHQscil7cmV0dXJuIG8mJnIgaW5zdGFuY2VvZiBNYXB9LHRvU2VyaWFsaXphYmxlOmZ1bmN0aW9uKHQpe3ZhciByPVtdO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQsZSl7ci5wdXNoKGUpLHIucHVzaCh0KX0pKSxyfSxmcm9tU2VyaWFsaXphYmxlOmZ1bmN0aW9uKHQpe2lmKG8pe2Zvcih2YXIgcj1uZXcgTWFwLGU9MDtlPHQubGVuZ3RoO2UrPTIpci5zZXQodFtlXSx0W2UrMV0pO3JldHVybiByfWZvcih2YXIgbj1bXSxhPTA7YTx0Lmxlbmd0aDthKz0yKW4ucHVzaChbdFtlXSx0W2UrMV1dKTtyZXR1cm4gbn19LHt0eXBlOlxcXCJbW1NldF1dXFxcIixsb29rdXA6aSYmU2V0LHNob3VsZFRyYW5zZm9ybTpmdW5jdGlvbih0LHIpe3JldHVybiBpJiZyIGluc3RhbmNlb2YgU2V0fSx0b1NlcmlhbGl6YWJsZTpmdW5jdGlvbih0KXt2YXIgcj1bXTtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtyLnB1c2godCl9KSkscn0sZnJvbVNlcmlhbGl6YWJsZTpmdW5jdGlvbih0KXtpZihpKXtmb3IodmFyIHI9bmV3IFNldCxlPTA7ZTx0Lmxlbmd0aDtlKyspci5hZGQodFtlXSk7cmV0dXJuIHJ9cmV0dXJuIHR9fV0scD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy50cmFuc2Zvcm1zPVtdLHRoaXMudHJhbnNmb3Jtc01hcD1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuc2VyaWFsaXplcj10fHxmLHRoaXMuYWRkVHJhbnNmb3JtcyhkKX1yZXR1cm4gdC5wcm90b3R5cGUuYWRkVHJhbnNmb3Jtcz1mdW5jdGlvbih0KXtmb3IodmFyIHI9MCxlPXQ9QXJyYXkuaXNBcnJheSh0KT90Olt0XTtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtpZih0aGlzLnRyYW5zZm9ybXNNYXBbbi50eXBlXSl0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zZm9ybSB3aXRoIHR5cGUgXFxcIicrbi50eXBlKydcXFwiIHdhcyBhbHJlYWR5IGFkZGVkLicpO3RoaXMudHJhbnNmb3Jtcy5wdXNoKG4pLHRoaXMudHJhbnNmb3Jtc01hcFtuLnR5cGVdPW59cmV0dXJuIHRoaXN9LHQucHJvdG90eXBlLnJlbW92ZVRyYW5zZm9ybXM9ZnVuY3Rpb24odCl7Zm9yKHZhciByPTAsZT10PUFycmF5LmlzQXJyYXkodCk/dDpbdF07cjxlLmxlbmd0aDtyKyspe3ZhciBuPWVbcl0sYT10aGlzLnRyYW5zZm9ybXMuaW5kZXhPZihuKTthPi0xJiZ0aGlzLnRyYW5zZm9ybXMuc3BsaWNlKGEsMSksZGVsZXRlIHRoaXMudHJhbnNmb3Jtc01hcFtuLnR5cGVdfXJldHVybiB0aGlzfSx0LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24odCl7dmFyIHI9bmV3IGModCx0aGlzLnRyYW5zZm9ybXMpLnRyYW5zZm9ybSgpO3JldHVybiB0aGlzLnNlcmlhbGl6ZXIuc2VyaWFsaXplKHIpfSx0LnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24odCl7dmFyIHI9dGhpcy5zZXJpYWxpemVyLmRlc2VyaWFsaXplKHQpO3JldHVybiBuZXcgbChyLHRoaXMudHJhbnNmb3Jtc01hcCkudHJhbnNmb3JtKCl9LHR9KCk7dC5kZWZhdWx0PXB9KHopO3ZhciBFPXQmJnQuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19O1MuX19lc01vZHVsZT0hMCxTLkRlY29kZT1QPVMuRW5jb2RlPXZvaWQgMDt2YXIgaz1FKE8pLEM9RSh3KSxEPUUoQSksST1FKGopLE49RSh6KSxSPVtELmRlZmF1bHQsQy5kZWZhdWx0LGsuZGVmYXVsdCxJLmRlZmF1bHRdLHg9bmV3IE4uZGVmYXVsdDt4LmFkZFRyYW5zZm9ybXMoUik7dmFyIFA9Uy5FbmNvZGU9ZnVuY3Rpb24odCl7cmV0dXJuIEpTT04ucGFyc2UoeC5lbmNvZGUodCkpfTtTLkRlY29kZT1mdW5jdGlvbih0KXtyZXR1cm4geC5kZWNvZGUoSlNPTi5zdHJpbmdpZnkodCkpfSxmdW5jdGlvbihyKXt2YXIgZT10JiZ0Ll9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fTtyLl9fZXNNb2R1bGU9ITA7dmFyIGE9ZShuKSxpPWUobyksdT1TO3IuZGVmYXVsdD1mdW5jdGlvbih0LHIsZSl7dm9pZCAwPT09ZSYmKGU9ITApO2Zvcih2YXIgbj10LG89e3BvaW50ZXJzOnt9LHNyYzp7bnBtOlxcXCJodHRwczovL25wbWpzLmNvbS9wYWNrYWdlL2NvbnNvbGUtZmVlZFxcXCIsZ2l0aHViOlxcXCJodHRwczovL2dpdGh1Yi5jb20vc2FtZGVudHk5OS9jb25zb2xlLWZlZWRcXFwifX0scz1mdW5jdGlvbih0KXt2YXIgYT1uW3RdO25bdF09ZnVuY3Rpb24oKXthLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgbj1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7c2V0VGltZW91dCgoZnVuY3Rpb24oKXt2YXIgYT1pLmRlZmF1bHQodCxuKTtpZihhKXt2YXIgbz1hO2UmJihvPXUuRW5jb2RlKGEpKSxyKG8sYSl9fSkpfSxvLnBvaW50ZXJzW3RdPWF9LGY9MCxjPWEuZGVmYXVsdDtmPGMubGVuZ3RoO2YrKylzKGNbZl0pO3JldHVybiBuLmZlZWQ9byxufX0oZSkscihlKSh3aW5kb3cuY29uc29sZSwoZnVuY3Rpb24odCl7dmFyIHI9UCh0KTtwYXJlbnQucG9zdE1lc3NhZ2Uoe3R5cGU6XFxcImNvbnNvbGVcXFwiLGNvZGVzYW5kYm94OiEwLGxvZzpBcnJheS5pc0FycmF5KHIpP3JbMF06cixjaGFubmVsSWQ6c2NvcGUuY2hhbm5lbElkfSxcXFwiKlxcXCIpfSkpO1xcblwiO1xuXG5leHBvcnQgeyBFdmVudEVtaXR0ZXIgYXMgRSwgZ2V0TWVzc2FnZUZyb21FcnJvciBhcyBhLCBmaW5kU3RhcnRTY3JpcHRQYWNrYWdlSnNvbiBhcyBiLCBjb25zb2xlSG9vayBhcyBjLCBmcm9tQnVuZGxlckZpbGVzVG9GUyBhcyBmLCBnZW5lcmF0ZVJhbmRvbUlkIGFzIGcsIHJlYWRCdWZmZXIgYXMgciwgd3JpdGVCdWZmZXIgYXMgdyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@codesandbox/sandpack-client/dist/consoleHook-cdbe54ab.mjs\n"));

/***/ })

}]);